/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.action.qualified_service_actions_name) %>;

@javax.ejb.Startup
@javax.ejb.Singleton
public class <%= service.action.service_actions_name %>
{
  @javax.inject.Inject
  @javax.annotation.Nonnull
  private <%= service.ejb.boundary_interface_name %> _service;

  @javax.annotation.PostConstruct
  public void onInit()
  {
<% service.methods.select{|method|method.action?}.each do |method| -%>
    iris.rose.server.action.ActionExecutorRegistry.register( <%= method.name %>Action.actionTypeCode(), request -> <%= method.name %>Action.invokeAction( _service, request ) );
<% end -%>
  }
<% service.methods.select{|method|method.action?}.each do |method| -%>

  @java.lang.SuppressWarnings( "PMD.FormalParameterNamingConventions" )
  public static final class <%= method.name %>Action
  {
    @javax.annotation.Nonnull
    private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= method.name %>Action.class.getName() );

    private <%= method.name %>Action()
    {
    }

    @javax.annotation.Nonnull
    static String actionTypeCode()
    {
      return "<%= method.action.code %>";
    }

    @javax.annotation.Nonnull
    static iris.rose.server.action.InvocationResult invokeAction( @javax.annotation.Nonnull final <%= method.service.ejb.boundary_interface_name %> service, @javax.annotation.Nonnull final String actionParameters )
    {
<% if !method.parameters.empty? -%>
      final var reader = javax.json.Json.createReader( new java.io.StringReader( actionParameters ) );
      final var json = reader.readObject();
      reader.close();
<% end -%>
<% method.parameters.each do |param|
        conversion_rule =
      case
      when (param.enumeration? && param.enumeration.numeric_values?) then Proc.new {|value, isNullCheck| "#{isNullCheck}#{param.enumeration.ee.qualified_name}.values()[ json.getInt( #{value} ) ];"}
      when (param.enumeration? && param.enumeration.textual_values?) then Proc.new {|value, isNullCheck| "#{isNullCheck}#{param.enumeration.ee.qualified_name}.valueOf( json.getString( #{value} ) );"}
      when param.struct? && param.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonObject.class )
               .stream()
               .map( #{param.referenced_struct.action.qualified_json_encoder_name}::decode )
               .collect( java.util.stream.Collectors.toList() );"}
      when param.struct? then Proc.new {|value, isNullCheck| "#{isNullCheck}#{param.referenced_struct.action.qualified_json_encoder_name}.decode( json.getJsonObject( #{value} ) );"}
      when param.date? && param.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonString.class )
               .stream()
               .map( javax.json.JsonString::getString )
               .map( s -> iris.rose.server.service.util.RDate.toDate( iris.rose.server.service.util.RDate.parse( s ) ) )
               .collect( java.util.stream.Collectors.toList() );"}
      when param.date? then Proc.new {|value, isNullCheck| "#{isNullCheck}iris.rose.server.service.util.RDate.toDate( iris.rose.server.service.util.RDate.parse( json.getString( #{value} ) ) );"}
      when param.datetime? && param.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonNumber.class )
               .stream()
               .map( javax.json.JsonString::longValue )
               .map( i -> new java.util.Date( i ) )
               .collect( java.util.stream.Collectors.toList() );"}
      when param.datetime? then Proc.new {|value, isNullCheck| "#{isNullCheck}new java.util.Date( json.getJsonNumber( #{value} ).longValue() );"}
      when (param.integer? || param.reference?) && param.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonNumber.class )
               .stream()
               .map( javax.json.JsonNumber::intValue )
               .collect( java.util.stream.Collectors.toList() );"}
      when param.integer? || param.reference?  then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getInt( #{value} );"}
      when param.boolean? && param.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
               .stream()
               .map( javax.json.JsonValue::getValueType )
               .map( v -> javax.json.JsonValue.ValueType.TRUE == v )
               .collect( java.util.stream.Collectors.toList() );"}
      when param.boolean? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getBoolean( #{value} );"}
      when param.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonString.class )
               .stream()
               .map( javax.json.JsonString::getString )
               .collect( java.util.stream.Collectors.toList() );"}
      else Proc.new{|value, isNullCheck| "#{isNullCheck}json.getString( #{value} );" }
      end
      -%>
<%= "      final var #{Reality::Naming.camelize(param.name)} = " + conversion_rule.call("\"#{param.name}\"", param.nullable? ? "null == json.get( \"#{param.name}\" ) ? null : " : "") %>
<% end -%>

      try
      {
<% if method.return_value.return_type != :void -%>
        service.<%= Reality::Naming.camelize(method.name) %>( <%= method.parameters.map {|param| Reality::Naming.camelize(param.name)}.join(", ") %> );
        final var encodedResult = org.realityforge.replicant.server.ee.ReplicantContextHolder.get( org.realityforge.replicant.server.ServerConstants.REQUEST_RESPONSE_KEY );
        return new iris.rose.server.action.InvocationResult( true, null == encodedResult ? null : encodedResult.toString(), "<%= method.qualified_name %> completed successfully" );
<% else -%>
        service.<%= Reality::Naming.camelize(method.name) %>( <%= method.parameters.map {|param| Reality::Naming.camelize(param.name)}.join(", ") %> );
        return new iris.rose.server.action.InvocationResult( true, null, "<%= method.qualified_name %> completed successfully" );<% end %>
      }
      catch ( final Exception | Error e )
      {
        // If we get to here, then the Exception will not be one thrown by the service method. Any expected exceptions would've been encoded in the ActionInterceptor
        // and thus it is actually an error of some sort.
        final var errorMessage = iris.syncrecord.server.service.ExceptionUtil.emitFilteredStackTrace( e );
        LOG.warning( errorMessage );
        return new iris.rose.server.action.InvocationResult( false, errorMessage, "<%= method.qualified_name %> completed with an unexpected exception: " + e.getMessage() );
      }
    }

    @java.lang.SuppressWarnings( { "unchecked", "RedundantSuppression" } )
    @javax.annotation.Nonnull
    static javax.json.JsonValue encodeRequestPayload( <%=
      method.parameters.collect{|p|
            "#{annotated_type(p, :ejb, :boundary, :final => true)} #{p.name}"
        }.join(', ')
      %> )
    {
      return
        javax.json.Json
          .createObjectBuilder()
      <%
        method.parameters.each do |parameter|
          conversion_rule =
          case
            when (parameter.enumeration? and parameter.nullable? && parameter.enumeration.numeric_values?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.ordinal() )"}
            when (parameter.enumeration? and parameter.nullable? && parameter.enumeration.textual_values?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.value() )"}
            when (parameter.enumeration? && parameter.enumeration.numeric_values?) then Proc.new {|value, type| "javax.json.Json.createValue( #{value}.ordinal() )"}
            when (parameter.enumeration? && parameter.enumeration.textual_values?) then Proc.new {|value, type| "javax.json.Json.createValue( #{value}.value() )"}
            when (parameter.struct? && parameter.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : #{struct.action.qualified_json_encoder_name}.encode( #{value} )"}
            when parameter.struct? then Proc.new {|value, type| "#{parameter.referenced_struct.action.qualified_json_encoder_name}.encode( #{value} )"}
            when (parameter.date? && parameter.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( iris.rose.server.service.util.RDate.fromDate( #{value} ).toString() )"}
            when parameter.date? then Proc.new {|value, type| "javax.json.Json.createValue( iris.rose.server.service.util.RDate.fromDate( #{value} ).toString() )"}
            when (parameter.datetime? && parameter.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( (#{value}).getTime() )"}
            when parameter.datetime? then Proc.new {|value, type| "javax.json.Json.createValue( (#{value}).getTime() )"}
            when parameter.nullable? then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value} )"}
            else Proc.new{|value, type| "#{value}" }
          end
      -%>
        .add( "<%= parameter.name %>",<% if parameter.collection? -%> javax.json.Json.createArrayBuilder(
              <% end -%>
   <%= conversion_rule.call( parameter.name, parameter.ejb.non_primitive_java_type(:boundary) ) %> )<% if parameter.collection? -%> )<% end %>
      <% end -%>
        .build();
    }
<% if method.return_value.return_type != :void %>

    @javax.annotation.Nonnull
    private static String encodeResponsePayload( <%= method.return_value.nullable? ? "@javax.annotation.Nullable" : "@javax.annotation.Nonnull"-%> final Object object )
    {
      @java.lang.SuppressWarnings( { "JavaExistingMethodCanBeUsed", "RedundantSuppression" } )
      final var builder = javax.json.Json.createObjectBuilder();
<% if method.return_value.nullable?-%>
      if ( null == object )
      {
        builder.add( "data", javax.json.JsonValue.NULL );
        return builder.build().toString();
      }

<% end -%>
      @java.lang.SuppressWarnings( { "unchecked", "RedundantSuppression" } )
      final var response = <% if method.return_value.struct?-%>
<%= method.return_value.referenced_struct.action.qualified_json_encoder_name %>.encode( (<%= method.return_value.ejb.non_primitive_java_type(:boundary) %>) object );
<% else -%>
 (<%= method.return_value.ejb.non_primitive_java_type(:boundary) %>) object;
<% end -%>
<% if method.return_value.collection? && !method.return_value.struct? -%>
      builder.add( "data", javax.json.Json.createArrayBuilder( response ) );
<% elsif method.return_value.struct?-%>
      builder.add( "data", response );
<% elsif method.return_value.boolean?-%>
      builder.add( "data", response ? javax.json.JsonValue.TRUE : javax.json.JsonValue.FALSE );
<% else -%>
      builder.add( "data", javax.json.Json.createValue( response ) );
<% end -%>
      return builder.build().toString();
    }
<% end -%>

    @java.lang.SuppressWarnings( { "JavaExistingMethodCanBeUsed", "RedundantSuppression", "DuplicatedCode", "UnnecessaryReturnStatement" } )
    <%= annotated_type(method.return_value, :ejb, :boundary, :static => true) %> decodeResponsePayload( <% if method.return_value.return_type == :void -%>@javax.annotation.Nullable <% else -%>@javax.annotation.Nonnull <% end -%>final String response )<%=
    method.exceptions.empty? ? '' : "\n      throws #{method.base_exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
  %>
    {
<% if method.return_value.return_type == :void -%>
      if ( null == response )
      {
        return;
      }
<% end -%>
<% if !method.exceptions.empty? || method.return_value.return_type != :void -%>
      final var reader = javax.json.Json.createReader( new java.io.StringReader( response ) );
      final var json = reader.readObject();
      reader.close();
<% unless method.exceptions.empty? -%>
      if ( json.containsKey( "error" ) )
      {
        decodeExceptionAndThrow( json );
      }
<% end -%>
<% if method.return_value.return_type != :void %>
<% if method.return_value.nullable? -%>
    if ( json.isNull("data") )
      {
        return null;
      }
<% end -%>
<% conversion_rule =
        case
        when (method.return_value.integer? || method.return_value.reference?) && method.return_value.collection? then Proc.new {|value| "json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonNumber.class )
               .stream()
               .map( javax.json.JsonNumber::intValue )
               .collect( java.util.stream.Collectors.toList() );"}
        when method.return_value.integer? || method.return_value.reference?  then Proc.new {|value| "json.getInt( #{value} );"}
        when method.return_value.boolean? && method.return_value.collection? then Proc.new {|value| "json.getJsonArray( #{value} )
               .stream()
               .map( javax.json.JsonValue::getValueType )
               .map( v -> javax.json.JsonValue.ValueType.TRUE == v )
               .collect( java.util.stream.Collectors.toList() );"}
        when method.return_value.boolean? then Proc.new {|value| "json.getBoolean( #{value} );"}
        when method.return_value.struct? && method.return_value.collection? then Proc.new {|value| "json.getJsonArray( #{value} )
               .stream()
               .map( javax.json.JsonValue::asJsonObject )
               .map( #{method.return_value.referenced_struct.action.qualified_json_encoder_name}::decode )
               .collect( java.util.stream.Collectors.toList() );"}
        when method.return_value.struct? then Proc.new {|value| "#{method.return_value.referenced_struct.action.qualified_json_encoder_name}.decode( json.getJsonObject( #{value} ) );"}
        when method.return_value.collection? then Proc.new {|value| "json.getJsonArray( #{value} )
               .getValuesAs( javax.json.JsonString.class )
               .stream()
               .map( javax.json.JsonString::getString )
               .collect( java.util.stream.Collectors.toList() );"}
        else Proc.new{|value| "json.getString( #{value} );" }
        end -%>
      <%= "return #{conversion_rule.call("\"data\"")}\n" %>
<% end-%>
<% end-%>
    }

<% if method.exceptions.empty? -%>
    @java.lang.SuppressWarnings( "unused" )
<% end -%>
    @javax.annotation.Nullable
    private static String encodeException( @javax.annotation.Nonnull final Throwable exception )
    {
<% if method.exceptions.empty? -%>
      return null;
<% else -%>
     <% method.exceptions.each do |exception| -%>
 if ( exception instanceof final <%= exception.ee.qualified_name %> e )
      {
        return javax.json.Json.createObjectBuilder().add("error", <%= exception.action.qualified_json_encoder_name %>.encode( e ) ).build().toString();
      }
      else<% end -%>

      {
        return null;
      }
<% end -%>
    }
<% unless method.exceptions.empty? -%>

    @java.lang.SuppressWarnings( { "SwitchStatementWithTooFewBranches", "RedundantSuppression" } )
    static void decodeExceptionAndThrow( @javax.annotation.Nonnull final javax.json.JsonObject json )<%=
    "\n    throws #{method.base_exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
  %>
    {
    final var error = json.getJsonObject( "error" );
    final var type = error.getString( "$type" );
    //noinspection SwitchStatementWithTooFewBranches
    switch ( type )
    {
<% method.exceptions.each do |exception| -%>
        case "<%= exception.data_module.name %>.<%= exception.name %>":
          <%= exception.action.qualified_json_encoder_name %>.decodeAndThrow( error );
          break;
<% end -%>
        default:
    }
  }
<%  end-%>

    @java.lang.annotation.Inherited
    @java.lang.annotation.Target( { java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD } )
    @java.lang.annotation.Retention( java.lang.annotation.RetentionPolicy.RUNTIME )
    @javax.interceptor.InterceptorBinding
    public @interface ActionInterceptorBinding
    {
    }

    @java.lang.SuppressWarnings( "DuplicatedCode" )
    @javax.interceptor.Interceptor
    @javax.annotation.Priority( javax.interceptor.Interceptor.Priority.LIBRARY_BEFORE + 110 )
    @ActionInterceptorBinding
    public static class ActionInterceptor
    {
      @javax.annotation.Resource
      private javax.transaction.TransactionSynchronizationRegistry _registry;

      @javax.interceptor.AroundInvoke
      public Object responseIntercept( @javax.annotation.Nonnull final javax.interceptor.InvocationContext context )
        throws Exception
      {
        // This should check if we are being called in a Replicant transaction
        // This if is probably not what we want
        final var transactionKey = _registry.getTransactionKey();
        if ( null == transactionKey )
        {
          return context.proceed();
        }
        try
        {
<% if method.return_value.return_type != :void -%>
          final var result = context.proceed();
          final var encodedResponse = encodeResponsePayload( result );
          // Put in the ThreadLocal in case this request is not going via Replicant (UserService)
          // Temporary hack as we should have all requests via Replicant
          org.realityforge.replicant.server.ee.ReplicantContextHolder.put( org.realityforge.replicant.server.ServerConstants.REQUEST_RESPONSE_KEY, encodedResponse );
          _registry.putResource( org.realityforge.replicant.server.ServerConstants.REQUEST_RESPONSE_KEY, encodedResponse );
          return result;
<% else -%>
          return context.proceed();
<% end -%>
        }
        catch ( final Exception e  )
        {
          final var encodedResponse = encodeException( e );
          org.realityforge.replicant.server.ee.ReplicantContextHolder.put( org.realityforge.replicant.server.ServerConstants.REQUEST_RESPONSE_KEY, encodedResponse );
          _registry.putResource( org.realityforge.replicant.server.ServerConstants.REQUEST_RESPONSE_KEY, encodedResponse );
          throw e;
        }
      }
    }
  }
<% end -%>
}

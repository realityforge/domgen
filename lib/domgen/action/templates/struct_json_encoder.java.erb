/* DO NOT EDIT: File is auto-generated */
package <%= to_package(struct.action.qualified_json_encoder_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
<% unless struct.ee.module_local? %>public <% end %>final class <%= struct.action.json_encoder_name %>
{
  private <%= struct.action.json_encoder_name %>()
  {
  }

  @javax.annotation.Nonnull
  <% unless struct.ee.module_local? %>public <% end %>static javax.json.JsonArray encode( @javax.annotation.Nonnull final java.util.List<<%= struct.ee.qualified_name %>> structs )
  {
    final javax.json.JsonArrayBuilder builder = javax.json.Json.createArrayBuilder();
    for ( final <%= struct.ee.qualified_name %> struct : structs )
    {
      builder.add( encode( struct ) );
    }
    return builder.build();
  }

  @javax.annotation.Nonnull
  <% unless struct.ee.module_local? %>public <% end %>static javax.json.JsonObject encode( @javax.annotation.Nonnull final <%= struct.ee.qualified_name %> struct )
  {
    return
      javax.json.Json
        .createObjectBuilder()
<% struct.fields.each do |field|
    conversion_rule =
      case
        when (field.enumeration? and field.nullable? && parameter.enumeration.numeric_values?) then Proc.new {|value| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.ordinal() )"}
        when (field.enumeration? and field.nullable? && parameter.enumeration.textual_values?) then Proc.new {|value| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.value() )"}
        when (field.enumeration? && field.enumeration.numeric_values?) then Proc.new {|value| "javax.json.Json.createValue( #{value}.ordinal() )"}
        when (field.enumeration? && field.enumeration.textual_values?) then Proc.new {|value| "javax.json.Json.createValue( #{value}.value() )"}
        when (field.struct? && field.nullable?) then Proc.new {|value| "null == #{value} ? javax.json.JsonValue.NULL : #{field.referenced_struct.action.qualified_json_encoder_name}.encode( #{value} )"}
        when field.struct? then Proc.new {|value| "#{field.referenced_struct.action.qualified_json_encoder_name}.encode( #{value} )"}
        when (field.date? && field.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : iris.rose.server.service.util.RDate.fromDate( #{value} ).toString()"}
        when field.date? then Proc.new {|value, type| "iris.rose.server.service.util.RDate.fromDate( #{value} ).toString()"}
        when (field.datetime? && field.nullable?) then Proc.new {|value, type| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value}.getTime() )"}
        when field.datetime? then Proc.new {|value, type| "javax.json.Json.createValue( #{value}.getTime() )"}
        when field.nullable? then Proc.new {|value| "null == #{value} ? javax.json.JsonValue.NULL : javax.json.Json.createValue( #{value} )"}
        else Proc.new{|value| value }
      end
-%>
        .add( "<%= field.name %>",<% if field.collection? -%> javax.json.Json.createArrayBuilder(<% end -%>
 <%= conversion_rule.call( "struct.#{getter_prefix(field)}#{field.name}()#{field.set? ? ".stream().toList()" : ""}" ) %> )<% if field.collection? -%> )<% end %>
<% end -%>
        .build();
  }

  @javax.annotation.Nonnull
  <% unless struct.ee.module_local? %>public <% end %>static java.util.List<<%= struct.ee.qualified_name %>> decode( @javax.annotation.Nonnull final javax.json.JsonArray jsonArray )
  {
    final java.util.List<<%= struct.ee.qualified_name %>> array = new java.util.ArrayList<>();
    for ( final javax.json.JsonValue value : jsonArray )
    {
      array.add( decode( value.asJsonObject() ) );
    }
    return array;
  }

  @javax.annotation.Nonnull
  <% unless struct.ee.module_local? %>public <% end %>static <%= struct.ee.qualified_name %> decode( @javax.annotation.Nonnull final javax.json.JsonObject json )
  {
    return new <%= struct.ee.qualified_name %>(
     <% struct.fields.each_with_index do |field, index|
    conversion_rule =
       case
         when (field.enumeration? && field.enumeration.numeric_values?) then Proc.new {|value, isNullCheck| "#{isNullCheck}#{field.enumeration.ee.qualified_name}.values()[ json.getInt( #{value} ) ]"}
         when (field.enumeration? && field.enumeration.textual_values?) then Proc.new {|value, isNullCheck| "#{isNullCheck}#{field.enumeration.ee.qualified_name}.valueOf( json.getString( #{value} ) )"}
         when field.struct? && field.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonObject.class )
             .stream()
             .map( o -> #{field.referenced_struct.action.qualified_json_encoder_name}.decode( o ) )
             .collect( #{field.sequence? ? "java.util.stream.Collectors.toList()" : "java.util.stream.Collectors.toSet()"} )"}
         when field.struct? then Proc.new {|value, isNullCheck| "#{isNullCheck}#{field.referenced_struct.action.qualified_json_encoder_name}.decode( json.getJsonObject( #{value} ) )"}
         when field.date? && field.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonString.class )
             .stream()
             .map( javax.json.JsonString::getString )
             .map( s -> iris.rose.server.service.util.RDate.toDate( iris.rose.server.service.util.RDate.parse( s ) ) )
             .collect( #{field.sequence? ? "java.util.stream.Collectors.toList()" : "java.util.stream.Collectors.toSet()"} )"}
         when field.date? then Proc.new {|value, isNullCheck| "#{isNullCheck}iris.rose.server.service.util.RDate.toDate( iris.rose.server.service.util.RDate.parse( json.getString( #{value} ) ) )"}
         when field.datetime? && field.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonNumber.class )
             .stream()
             .map( javax.json.JsonString::intValue )
             .map( i -> new java.util.Date( i ) )
             .collect( #{field.sequence? ? "java.util.stream.Collectors.toList()" : "java.util.stream.Collectors.toSet()"} )"}
         when field.datetime? then Proc.new {|value, isNullCheck| "#{isNullCheck}new java.util.Date( json.getInt( #{value} ) )"}
         when field.integer? && field.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonNumber.class )
             .stream()
             .map( javax.json.JsonNumber::intValue )
             .collect( #{field.sequence? ? "java.util.stream.Collectors.toList()" : "java.util.stream.Collectors.toSet()"} )"}
         when field.integer? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getInt( #{value} )"}
         when field.boolean? && field.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
             .stream()
             .map( javax.json.JsonValue::getValueType )
             .map( v -> javax.json.JsonValue.ValueType.TRUE == v )
             .collect( #{field.sequence? ? "java.util.stream.Collectors.toList()" : "java.util.stream.Collectors.toSet()"} )"}
         when field.boolean? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getBoolean( #{value} )"}
         when field.collection? then Proc.new {|value, isNullCheck| "#{isNullCheck}json.getJsonArray( #{value} )
             .getValuesAs( javax.json.JsonString.class )
             .stream()
             .map( javax.json.JsonString::getString )
             .collect( #{field.sequence? ? "java.util.stream.Collectors.toList()" : "java.util.stream.Collectors.toSet()"} )"}
         else Proc.new{|value, isNullCheck| "#{isNullCheck}json.getString( #{value} )" }
       end
-%>
      <%= conversion_rule.call("\"#{field.name}\"", field.nullable? ? "json.isNull( \"#{field.name}\" ) ? null : " : "") %><%= ',' unless index == struct.fields.size - 1 %>
     <% end -%>
    );
  }
}

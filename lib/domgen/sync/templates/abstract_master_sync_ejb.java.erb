/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_abstract_master_sync_ejb_name) %>;

@SuppressWarnings( "PMD.GuardLogStatement" )
public abstract class <%= data_module.sync.abstract_master_sync_ejb_name %>
  extends iris.syncrecord.server.service.StandardSyncService
{
  protected static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= data_module.sync.abstract_master_sync_ejb_name %>.class.getName() );

  @javax.inject.Inject
  private <%= data_module.service_by_name(:SyncTempPopulationService).ejb.qualified_service_name %> _syncTempPopulationService;

  protected void syncControl( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
    final String forceSyncFeatureFlag = "ForceSync" + mappingSourceCode;
    final boolean forceSync = isFeatureEnabled( forceSyncFeatureFlag );
    recorder.incMetric( forceSyncFeatureFlag, forceSync ? 1 : 0 );
    syncControl( mappingSourceCode, new java.util.Date(), recorder, forceSync );
    if ( iris.syncrecord.server.data_type.Status.OK == recorder.getStatus() )
    {
      getFeatureFlagService().disableFeature( forceSyncFeatureFlag );
    }
  }

  protected void syncControl( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder, final boolean forceSync )
  {
    initMetrics( recorder );

    _syncTempPopulationService.preSync( mappingSourceCode );

<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>
    reset<%= entity.data_module.name %><%= entity.name %>( mappingSourceCode, at, recorder );
<% end -%>

<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    syncEntity<%= entity.data_module.name %><%= entity.name %>( mappingSourceCode, at, recorder, forceSync );
<% end -%>

    _syncTempPopulationService.postSync( mappingSourceCode );
  }

  private void initMetrics( @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    recorder.incMetric( "<%= entity.qualified_name %>.Total.Original", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.Total.New", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.AddCount", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.RemoveCount", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.UpdateCount", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.AddDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.UpdateDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.RemoveDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.DiffCheckDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.PopulateSyncTempDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.FinalizeSyncTempDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.VerifySyncTempDuration", 0 );
    recorder.incMetric( "<%= entity.qualified_name %>.TotalSyncDuration", 0 );
<% end -%>
  }

<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>
  private void reset<%= entity.data_module.name %><%= entity.name %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
    final long entityStartAt = System.currentTimeMillis();
    log( recorder, "Reset SyncTemp for <%= entity.qualified_name %>" );
    _syncTempPopulationService.reset<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, at, recorder );
    final long entityEndAt = System.currentTimeMillis();
    log( recorder, "Reset SyncTemp for <%= entity.qualified_name %> completed in " + ( entityEndAt - entityStartAt ) + "ms" );
    recorder.incMetric( "<%= entity.qualified_name %>.ResetSyncTempDuration", (int) ( entityEndAt - entityStartAt ) );
  }
<% end -%>

<% data_module.sync.entities_to_synchronize.each do |entity| -%>
  private void syncEntity<%= entity.data_module.name %><%= entity.name %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder, final boolean forceSync )
  {
    final long entityStartAt = System.currentTimeMillis();
    sync<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, at, recorder, forceSync );
    final long entityEndAt = System.currentTimeMillis();
    recorder.incMetric( "<%= entity.qualified_name %>.TotalSyncDuration", (int) ( entityEndAt - entityStartAt ) );
  }
<% end -%>

  protected abstract javax.persistence.EntityManager getEntityManager();
<% data_module.sync.entities_to_synchronize.each do |entity| -%>

  protected int count<%= entity.qualified_name.gsub('.','') %>Master( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    return ((java.lang.Number) getEntityManager().createNativeQuery( "<%= j_escape_string("SELECT COUNT(*) FROM #{entity.sync.master_entity.sql.qualified_table_name} WHERE #{entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name} = ? AND DeletedAt IS NULL") %>" ).setParameter( 1, mappingSourceCode ).getSingleResult() ).intValue();
  }

  protected int sync<%= entity.qualified_name.gsub('.','') %>DeletesToMaster( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at )
  {
    final String sql =
      "<%= j_escape_string("UPDATE #{entity.sql.dialect.requires_table_name_for_update ? "#{entity.sync.master_entity.sql.qualified_table_name} U" : 'M' }" ) %>" +
      "<%= j_escape_string(" SET #{ entity.sync.master_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name} = ?, #{entity.sync.master_entity.attribute_by_name(:MasterSynchronized).sql.quoted_column_name} = #{entity.sql.dialect.false_sql} ") %>" +
      "<%= j_escape_string(" FROM #{entity.sync.master_entity.sql.qualified_table_name} AS M ") %>" +
      "<%= j_escape_string(" LEFT JOIN #{entity.sync.sync_temp_entity.sql.qualified_table_name} AS S ON M.#{entity.sync.master_entity.attribute_by_name(:MappingKey).sql.quoted_column_name} = S.#{entity.sync.sync_temp_entity.attribute_by_name(:MappingKey).sql.quoted_column_name} AND M.#{entity.sync.master_entity.attribute_by_name(:MappingId).sql.quoted_column_name} = S.#{entity.sync.sync_temp_entity.attribute_by_name(:MappingId).sql.quoted_column_name} AND M.#{entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name} = S.#{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name} ") %>" +
      "<%= j_escape_string(" WHERE #{entity.sql.dialect.requires_table_name_for_update ? "U.#{entity.sync.master_entity.attribute_by_name(:Id).sql.quoted_column_name} = M.#{entity.sync.master_entity.attribute_by_name(:Id).sql.quoted_column_name} AND" : '' }") %>" +
      "<%= j_escape_string("   S.#{entity.sync.sync_temp_entity.attribute_by_name(:MappingId).sql.quoted_column_name} IS NULL AND M.#{entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name} = ? AND M.#{entity.sync.master_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name} IS NULL") %>";
    return getEntityManager().createNativeQuery( sql ).setParameter( 1, at ).setParameter( 2, mappingSourceCode ).executeUpdate();
  }
<% if entity.sync.update_via_sync? %>

  protected int sync<%= entity.qualified_name.gsub('.','') %>UpdatesToMaster( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at )
  {
<% reference_index = 0 -%>
    final String sql =
      "<%= j_escape_string("UPDATE #{entity.sql.dialect.requires_table_name_for_update ? "#{entity.sync.master_entity.sql.qualified_table_name} U" : 'M' }") %>" +
      "<%= j_escape_string(" SET #{entity.sync.master_entity.attribute_by_name(:MasterSynchronized).sql.quoted_column_name} = #{entity.sql.dialect.false_sql}, ") %>" +
      "<%= j_escape_string("     #{entity.sync.attributes_to_update.select{|a| ![:MappingKey, :MappingId].include?(a.name)}.collect{|a| "#{entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name} = #{
if a.reference?
  reference_index += 1
  col_name = entity.sync.master_entity.attribute_by_name(a.name).referenced_entity.primary_key.sql.quoted_column_name
  ref_prefix = "R#{reference_index}"
  if a.referenced_entity.abstract?
    s = a.referenced_entity.concrete_subtypes.size
    cols = (0...(s)).collect do |index|
      "#{ref_prefix}#{index}.#{col_name}"
    end.join(', ')
    "COALESCE(#{cols})"
  else
    "#{ref_prefix}.#{col_name}"
  end
else
  "T.#{entity.sync.sync_temp_entity.attribute_by_name(a.name).sql.quoted_column_name}"
end
}"}.join(', ') }") %> " +
      "<%= j_escape_string(" FROM #{ entity.sync.master_entity.sql.qualified_table_name } M ") %>" +
      "<%= j_escape_string(" JOIN #{ entity.sync.sync_temp_entity.sql.qualified_table_name } T ON M.#{ entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } AND M.#{ entity.sync.master_entity.attribute_by_name(:MappingKey).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingKey).sql.quoted_column_name} AND M.#{entity.sync.master_entity.attribute_by_name(:MappingId).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingId).sql.quoted_column_name } AND M.#{ entity.sync.master_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name } IS NULL ") %>" +
<% reference_index = 0 -%>
<%
  entity.sync.attributes_to_update.select{|a| a.reference? }.each do |a|
   reference_index += 1
-%>
<% if a.referenced_entity.abstract? -%>
<% a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index| -%>
      "<%= j_escape_string(" LEFT JOIN #{ subtype.sql.qualified_table_name } R#{ reference_index }#{ index } ON ") %>" +
      "<%= j_escape_string("     R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(:MappingId).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(:MappingSource).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } ") %> AND " +
      "<%= j_escape_string("     R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(:DeletedAt).sql.quoted_column_name } IS NULL ") %>" +
<% end -%>
<% else -%>
      "<%= j_escape_string(" #{ a.nullable? ? 'LEFT ' : '' }JOIN #{ a.referenced_entity.sql.qualified_table_name } R#{ reference_index } ON ") %>" +
      "<%= j_escape_string("     R#{ reference_index }.#{ a.referenced_entity.attribute_by_name(:MappingId).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }.#{ a.referenced_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }.#{ a.referenced_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name } IS NULL ") %>" +
<% end -%>
<% end -%>
      " WHERE " +
      "<%= j_escape_string("   #{entity.sql.dialect.requires_table_name_for_update ? "U.#{entity.sync.master_entity.attribute_by_name(:Id).sql.quoted_column_name} = M.#{entity.sync.master_entity.attribute_by_name(:Id).sql.quoted_column_name} AND" : '' }") %>" +
      "<%= j_escape_string("   M.#{ entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = ? AND ") %>" +
<%
  reference_index = 0
  entity.sync.attributes_to_update.select{|a| a.reference? }.each do |a|
    reference_index += 1
    next unless a.nullable?
-%>
<% if a.referenced_entity.abstract? -%>
      "<%= j_escape_string("   (T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } IS NULL OR (") %>" +
<% a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index| -%>
      "<%= j_escape_string("R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(a.name).referenced_entity.primary_key.sql.quoted_column_name } IS NOT NULL AND ") %>" +
<% end -%>
      " 1 = 1 )" +
      "   ) AND " +
<% else -%>
      "<%= j_escape_string("   (T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } IS NULL OR R#{ reference_index }.#{ entity.sync.master_entity.attribute_by_name(a.name).referenced_entity.primary_key.sql.quoted_column_name } IS NOT NULL) AND ") %>" +
<% end -%>
<% end -%>
      "   (" +
<%
  reference_index = 0
  entity.sync.attributes_to_update.select{|a| ![:MappingKey, :MappingId].include?(a.name)}.each do |a|
   reference_value = if a.reference?
      reference_index += 1
      col_name = entity.sync.master_entity.attribute_by_name(a.name).referenced_entity.primary_key.sql.quoted_column_name
      ref_prefix = "R#{reference_index}"
      if a.referenced_entity.abstract?
        s = a.referenced_entity.concrete_subtypes.size
        cols = (0...(s)).collect do |index|
          "#{ref_prefix}#{index}.#{col_name}"
        end.join(', ')
        "COALESCE(#{cols})"
      else
        "#{ref_prefix}.#{col_name}"
      end
    else
      "T.#{entity.sync.sync_temp_entity.attribute_by_name(a.name).sql.quoted_column_name}"
    end

    if a.nullable?
-%>
      "<%= j_escape_string("     ( (#{ reference_value } IS NULL AND M.#{ entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name } IS NOT NULL) OR (#{ reference_value } IS NOT NULL AND M.#{ entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name } IS NULL) OR (#{ reference_value } IS NOT NULL AND #{ reference_value } <> M.#{ entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name }) ) OR ") %>" +
<% else -%>
      "<%= j_escape_string("     #{ reference_value } <> M.#{ entity.sync.master_entity.attribute_by_name(a.name).sql.quoted_column_name } OR ") %>" +
<% end -%>
<% end -%>
      "     1 = 0 " +
      "   )";
<% java_command = 'getEntityManager().createNativeQuery( sql ).setParameter( 1, mappingSourceCode ).executeUpdate()' -%>
<% if entity.sync.recursive? -%>
    // Handle recursive tables
    int count = <%= java_command -%>;
    int total = count;
    while( count  > 0 )
    {
      count = <%= java_command -%>;
      total += count;
    }
    return total;
<% else -%>
    return <%= java_command -%>;
<% end -%>
  }
<% end %>

  protected int sync<%= entity.qualified_name.gsub('.','') %>CreatesToMaster( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at )
  {
<% reference_index = 0 -%>
    final String sql =
      "<%= j_escape_string("INSERT INTO #{ entity.sync.master_entity.sql.qualified_table_name }(#{ entity.sync.master_entity.attribute_by_name(:MasterSynchronized).sql.quoted_column_name }, #{ entity.sync.master_entity.attribute_by_name(:CreatedAt).sql.quoted_column_name }, #{ entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name }, #{ entity.sync.attributes_to_synchronize.collect{|a| a.sql.quoted_column_name }.join(', ') }) ") %>" +
      "<%= j_escape_string(" SELECT #{entity.sql.dialect.false_sql }, ?, T.#{ entity.sync.master_entity.attribute_by_name(:MappingSource).sql.quoted_column_name }, #{ entity.sync.attributes_to_synchronize.collect{|a|
if a.reference?
  reference_index += 1
  col_name = entity.sync.master_entity.attribute_by_name(a.name).referenced_entity.primary_key.sql.quoted_column_name
  ref_prefix = "R#{reference_index}"
  if a.referenced_entity.abstract?
    s = a.referenced_entity.concrete_subtypes.size
    cols = (0...(s)).collect do |index|
      "#{ref_prefix}#{index}.#{col_name}"
    end.join(', ')
    "COALESCE(#{cols})"
  else
    "#{ref_prefix}.#{col_name}"
  end
else
  "T.#{entity.sync.sync_temp_entity.attribute_by_name(a.name).sql.quoted_column_name}"
end
  }.join(', ') }") %> " +
      "<%= j_escape_string(" FROM #{ entity.sync.sync_temp_entity.sql.qualified_table_name } T ") %>" +
      "<%= j_escape_string(" LEFT JOIN #{ entity.sync.master_entity.sql.qualified_table_name } M ON ") %>" +
      "<%= j_escape_string("     M.#{ entity.sync.master_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name } IS NULL AND ") %>" +
      "<%= j_escape_string("     M.#{ entity.sync.master_entity.attribute_by_name(:MappingId).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingId).sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     M.#{ entity.sync.master_entity.attribute_by_name(:MappingKey).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingKey).sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     M.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } ") %>" +
<% reference_index = 0 -%>
<%
  entity.sync.attributes_to_synchronize.select{|a| a.reference? }.each do |a|
   reference_index += 1
-%>
<% if a.referenced_entity.abstract? -%>
<% a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index| -%>
      "<%= j_escape_string(" LEFT JOIN #{ subtype.sql.qualified_table_name } R#{ reference_index }#{ index } ON ") %>" +
      "<%= j_escape_string("     R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(:DeletedAt).sql.quoted_column_name } IS NULL AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(:MappingId).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }#{ index }.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } ") %>" +
<% end -%>
<% else -%>
      "<%= j_escape_string(" #{ a.nullable? ? 'LEFT ' : '' }JOIN #{ a.referenced_entity.sql.qualified_table_name } R#{ reference_index } ON ") %>" +
      "<%= j_escape_string("     R#{ reference_index }.#{ a.referenced_entity.attribute_by_name(:DeletedAt).sql.quoted_column_name } IS NULL AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }.#{ a.referenced_entity.attribute_by_name(:MappingId).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } AND ") %>" +
      "<%= j_escape_string("     R#{ reference_index }.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } ") %>" +
<% end -%>
<% end -%>
      " WHERE " +
      "<%= j_escape_string("   M.#{ entity.sync.master_entity.attribute_by_name(:Id).sql.quoted_column_name } IS NULL AND ") %>" +
<%
  reference_index = 0
  entity.sync.attributes_to_synchronize.select{|a| a.reference? }.each do |a|
    reference_index += 1
    next unless a.nullable?
-%>
<% if a.referenced_entity.abstract? -%>
  "<%= j_escape_string("   (T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } IS NULL OR (") %>" +
<% a.referenced_entity.concrete_subtypes.each_with_index do |subtype, index| -%>
  "<%= j_escape_string("R#{ reference_index }#{ index }.#{ subtype.attribute_by_name(:MappingId).sql.quoted_column_name } IS NOT NULL AND ") %>" +
<% end -%>
      " 1 = 1 )" +
      ") AND " +
<% else -%>
      "<%= j_escape_string("   (T.#{ entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingId").sql.quoted_column_name } IS NULL OR R#{ reference_index }.#{ entity.sync.master_entity.attribute_by_name(a.name).referenced_entity.primary_key.sql.quoted_column_name } IS NOT NULL) AND ") %>" +
<% end -%>
<% end -%>
      "<%= j_escape_string("   T.#{ entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name } = ?") %>";
<% java_command ='getEntityManager().createNativeQuery( sql ).setParameter( 1, at ).setParameter( 2, mappingSourceCode ).executeUpdate()'-%>
<% if entity.sync.recursive? -%>
    // Handle recursive tables
    int count = <%= java_command -%>;
    int total = count;
    while( count  > 0 )
    {
      count = <%= java_command -%>;
      total += count;
    }
    return total;
<% else -%>
    return <%= java_command -%>;
<% end -%>
  }

  protected void sync<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.util.Date at, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder, final boolean forceSync )
  {
    log( recorder, "Beginning synchronization of <%= entity.qualified_name %>" );

    {
      final long entityStartAt = System.currentTimeMillis();
      log( recorder, "Populating SyncTemp for <%= entity.qualified_name %>" );
      _syncTempPopulationService.populate<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, at, recorder );
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "Reset SyncTemp for <%= entity.qualified_name %> completed in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.PopulateSyncTempDuration", (int) ( entityEndAt - entityStartAt ) );
    }

    {
      final long entityStartAt = System.currentTimeMillis();
      log( recorder, "Finalizing SyncTemp for <%= entity.qualified_name %>" );
      _syncTempPopulationService.finalize<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, at, recorder );
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "Finalizing SyncTemp for <%= entity.qualified_name %> completed in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.FinalizeSyncTempDuration", (int) ( entityEndAt - entityStartAt ) );
    }

    {
      final long entityStartAt = System.currentTimeMillis();
      log( recorder, "Verifying SyncTemp for <%= entity.qualified_name %>" );
      _syncTempPopulationService.verify<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, recorder );
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "Verifying SyncTemp for <%= entity.qualified_name %> completed in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.VerifySyncTempDuration", (int) ( entityEndAt - entityStartAt ) );
    }

    {
      final long entityStartAt = System.currentTimeMillis();
      final int newCount = _syncTempPopulationService.count<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode );
      final int oldCount = count<%= entity.qualified_name.gsub('.','') %>Master( mappingSourceCode );
      final int diff = Math.abs( newCount - oldCount );

      recorder.incMetric( "<%= entity.qualified_name %>.Total.Original", oldCount );
      recorder.incMetric( "<%= entity.qualified_name %>.Total.New", newCount );

      // The change must be less than 10 % unless forceSync is set
      if ( !forceSync && diff > 0.1 * oldCount )
      {
        final String message = "Abnormal update count (Diff = " + diff + ", Old Row Count = " + oldCount + ", New Row Count = " + newCount + ") observed for <%= entity.qualified_name %>. Halting sync process.";
        log( recorder, message );
        throw new IllegalStateException( message );
      }
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "DiffCheck for <%= entity.qualified_name %> completed in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.DiffCheckDuration", (int) ( entityEndAt - entityStartAt ) );
    }

    {
      final long entityStartAt = System.currentTimeMillis();
      log( recorder, "Synchronizing deletes for <%= entity.qualified_name %>" );
      final int deleteCount = sync<%= entity.qualified_name.gsub('.','') %>DeletesToMaster( mappingSourceCode, at );
      recorder.incMetric( "<%= entity.qualified_name %>.RemoveCount", deleteCount );
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "Deleted " + deleteCount + " records for <%= entity.qualified_name %> in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.RemoveDuration", (int) ( entityEndAt - entityStartAt ) );
    }

<% if entity.sync.update_via_sync? %>
    {
      final long entityStartAt = System.currentTimeMillis();
      log( recorder, "Synchronizing updates for <%= entity.qualified_name %>" );
      final int updateCount = sync<%= entity.qualified_name.gsub('.','') %>UpdatesToMaster( mappingSourceCode, at );
      recorder.incMetric( "<%= entity.qualified_name %>.UpdateCount", updateCount );
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "Updated " + updateCount + " records for <%= entity.qualified_name %> in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.UpdateDuration", (int) ( entityEndAt - entityStartAt ) );
    }

<% end %>
    {
      final long entityStartAt = System.currentTimeMillis();
      log( recorder, "Synchronizing creates for <%= entity.qualified_name %>" );
      final int createCount = sync<%= entity.qualified_name.gsub('.','') %>CreatesToMaster( mappingSourceCode, at );
      recorder.incMetric( "<%= entity.qualified_name %>.AddCount", createCount );
      final long entityEndAt = System.currentTimeMillis();
      log( recorder, "Created " + createCount + " records for <%= entity.qualified_name %> in " + ( entityEndAt - entityStartAt ) + "ms" );
      recorder.incMetric( "<%= entity.qualified_name %>.AddDuration", (int) ( entityEndAt - entityStartAt ) );
    }

    log( recorder, "Completed synchronization of <%= entity.qualified_name %>" );
  }
<% end -%>

  protected void log( @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder, final String message )
  {
    LOG.info( message );
    recorder.addMessage( message );
  }

  protected int executeUpdate(  @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String sql )
  {
    return executeUpdate( sql.replace( "__MAPPING_SOURCE__", "'" + mappingSourceCode + "'" ) );
  }

  protected int executeUpdate( @javax.annotation.Nonnull final String sql )
  {
    return getEntityManager().createNativeQuery( interpolateSql( sql ) ).executeUpdate();
  }

  @javax.annotation.Nonnull
  protected String interpolateSql( @javax.annotation.Nonnull final String sql )
  {
    return sql;
  }
}

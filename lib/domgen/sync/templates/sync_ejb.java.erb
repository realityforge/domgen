/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_sync_ejb_name) %>;

@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.NOT_SUPPORTED )
@javax.enterprise.inject.Typed( <%= data_module.service_by_name(:SynchronizationService).ejb.qualified_service_name %>.class )
@SuppressWarnings( { "ConstantConditions", "PMD.GuardLogStatement" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "NP_ALWAYS_NULL", "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", "NP_LOAD_OF_KNOWN_NULL_VALUE", "CLI_CONSTANT_LIST_INDEX" } )
public class <%= data_module.sync.sync_ejb_name %>
  extends iris.syncrecord.server.service.StandardSyncService
  implements <%= data_module.service_by_name(:SynchronizationService).ejb.qualified_service_name %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= data_module.sync.sync_ejb_name %>.class.getName() );

  private static final int SYNC_ERROR_CODE = 42;

  @javax.inject.Inject
  private <%= data_module.service_by_name(:SynchronizationContext).ejb.qualified_boundary_interface_name %> _context;
<% if data_module.repository.imit? %>
  @javax.inject.Inject
  private <%= data_module.repository.service_by_name(data_module.repository.imit.subscription_manager).ejb.qualified_service_name %> _sessionManager;

<% end -%>
  private volatile boolean _inSync;

  @java.lang.Override
  @javax.annotation.Nonnull
  public iris.syncrecord.server.data_type.SyncStatusDTO synchronizeDataSource( @javax.annotation.Nonnull final String mappingSourceCode )
  {
    if ( !_inSync )
    {
      _inSync = true;
      try
      {
        if ( isFeatureEnabled( mappingSourceCode + ".syncEnabled" ) )
        {
          return performSynchronization( mappingSourceCode );
        }
        else
        {
          return createDisabledSyncStatus( mappingSourceCode );
        }
      }
      finally
      {
        _inSync = false;
      }
    }
    else
    {
      return createAlreadyActiveSyncStatus( mappingSourceCode );
    }
  }

  private void resetMetrics( @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
    recorder.incMetric( "Duration", 0 );
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount", 0 );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveCount", 0 );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateCount", 0 );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveDuration", 0 );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateDuration", 0 );
<% end -%>
  }
<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>

  private void sync<%= entity.data_module.name %><%= entity.name %>Removals( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    final long entityStartAt = System.currentTimeMillis();
    log( mappingSourceCode, "Synchronizing <%= entity.data_module.name %>.<%= entity.name %> removals" );
    mark<%= entity.data_module.name %><%= entity.name %>RemovalsPreSync( mappingSourceCode, recorder );
    synchronize<%= entity.data_module.name %><%= entity.name %>Removals( mappingSourceCode, recorder );
    final int removeCount = recorder.getMetricValue( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveCount" ).get();
    log( mappingSourceCode, "Removed " + removeCount + " <%= entity.data_module.name %>.<%= entity.name %> instances" );
    final long entityEndAt = System.currentTimeMillis();
    log( mappingSourceCode, "Synchronization of <%= entity.qualified_name %> removals completed in " + ( entityEndAt - entityStartAt ) + "ms" );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveDuration", (int) ( entityEndAt - entityStartAt ) );
  }
<% end -%>
<% data_module.sync.entities_to_synchronize.each do |entity|
  bulk_sync = entity.sync.enable_bulk_sync? -%>

  private void sync<%= entity.data_module.name %><%= entity.name %>Updates(
      @javax.annotation.Nonnull final String mappingSourceCode,
      @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder<% if bulk_sync -%>,
      final boolean isBulkSync<% end -%> )
    throws Exception
  {
    final long entityStartAt = System.currentTimeMillis();
    log( mappingSourceCode, <% if bulk_sync -%>( isBulkSync ? "Bulk " : "" ) + <% end -%>"Synchronizing <%= entity.qualified_name %> adds and updates" );
    synchronize<%= entity.data_module.name %><%= entity.name %>Updates( mappingSourceCode, recorder<% if bulk_sync -%>, isBulkSync<% end -%> );
    final int addCount = recorder.getMetricValue( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount" ).get();
    log( mappingSourceCode, "Added " + addCount + " <%= entity.data_module.name %>.<%= entity.name %> instances" );
<% if entity.sync.update_via_sync? -%>
    final int updateCount = recorder.getMetricValue( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateCount" ).get();
    log( mappingSourceCode, "Updated " + updateCount + " <%= entity.data_module.name %>.<%= entity.name %> instances" );
<% end -%>
    final long entityEndAt = System.currentTimeMillis();
    log( mappingSourceCode, "Synchronization of <%= entity.qualified_name %> adds and updated completed in " + ( entityEndAt - entityStartAt ) + "ms" );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateDuration", (int) ( entityEndAt - entityStartAt ) );
  }
<% end -%>

  private iris.syncrecord.server.data_type.SyncStatusDTO performSynchronization( @javax.annotation.Nonnull final String mappingSourceCode )
  {
    _context.preSync( mappingSourceCode );

    final iris.syncrecord.server.service.SynchronizationRecorder recorder = startSynchronization( mappingSourceCode );

    resetMetrics( recorder );

    final String bulkSyncFlag = mappingSourceCode + ".nextSyncIsBulk";
    final boolean isBulkSync = isFeatureEnabled( bulkSyncFlag );
    if ( isBulkSync )
    {
      recorder.incMetric( mappingSourceCode + ".syncWasBulk", 1 );
    }

    log( mappingSourceCode, "Synchronizing data" + ( isBulkSync ? " in bulk" : "" ) );
    final long syncStartAt = System.currentTimeMillis();
    try
    {
<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>
      sync<%= entity.data_module.name %><%= entity.name %>Removals( mappingSourceCode, recorder );
<% end -%>
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
      sync<%= entity.data_module.name %><%= entity.name %>Updates( mappingSourceCode, recorder<% if entity.sync.enable_bulk_sync? -%>, isBulkSync<% end -%> );
<% end -%>

      if ( isBulkSync )
      {
        getFeatureFlagService().disableFeature( bulkSyncFlag );
<% if data_module.repository.imit? %>
        _sessionManager.removeAllSessions();
<% end -%>
      }

      log( mappingSourceCode, "Successfully synchronized data" );
    }
    catch ( final Throwable e )
    {
      recordSyncError( recorder, SYNC_ERROR_CODE, e );
      log( mappingSourceCode, "Synchronisation of data failed", e );
    }
    finally
    {
      final long syncEndAt = System.currentTimeMillis();
      recorder.incMetric( "Duration", (int) ( syncEndAt - syncStartAt ) );
      completeSynchronization( recorder );
      _context.postSync( mappingSourceCode, recorder );
    }
    return toSyncStatus( recorder );
  }

  private void log( final String mappingSourceCode, final String message )
  {
    log( mappingSourceCode, message, null );
  }

  private void log( final String mappingSourceCode, final String message, final Throwable t )
  {
    final String prefix = mappingSourceCode + ": ";
    LOG.log( java.util.logging.Level.INFO, prefix + message, t );
  }
<% data_module.sync.entities_to_synchronize.each do |entity| -%>

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private java.util.List<Object[]> query<%= entity.data_module.name %><%= entity.name %>Updates( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    try
    {
      return _context.query<%= entity.data_module.name %><%= entity.name %>Updates( mappingSourceCode );
    }
    catch ( final Exception e )
    {
      recordSyncError( recorder, 1, "Error retrieving set of <%= entity.qualified_name %> to update", e );
      throw e;
    }
  }

<% if entity.sync.enable_bulk_sync? %>
  private void bulkSynchronize<%= entity.data_module.name %><%= entity.name %>Additions( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    try
    {
      recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount", _context.bulkCreate<%= entity.data_module.name %><%= entity.name %>( mappingSourceCode ) );
    }
    catch ( final Exception e )
    {
      recordSyncError( recorder, 1, "Error performing bulk synchronisation of <%= entity.qualified_name %> additions", e );
      throw e;
    }
  }
<% end -%>

  private void synchronize<%= entity.data_module.name %><%= entity.name %>Updates( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder<% if entity.sync.enable_bulk_sync? -%>, final boolean isBulkSync<% end -%> )
    throws Exception
  {
<% if entity.sync.enable_bulk_sync? %>
    // First attempt a bulk sync for additions
    if ( isBulkSync )
    {
      bulkSynchronize<%=entity.data_module.name%><%=entity.name%>Additions( mappingSourceCode, recorder );
    }
<% end -%>
    Exception lastException = null;
    // loop until no unprocessed entities or only entities
    // unprocessed are those with errors
    final java.util.ArrayList<Object[]> errors = new java.util.ArrayList<>();
    while( true )
    {
      // Consider allowing chunking/limits to limit memory pressure of large syncs
      final java.util.List<Object[]> results = query<%= entity.data_module.name %><%= entity.name %>Updates( mappingSourceCode, recorder );
      if ( results.isEmpty() || errors.size() == results.size() )
      {
        if ( null != lastException )
        {
          throw lastException;
        }
        return;
      }
      errors.clear();
      for ( final Object[] result : results )
      {
        try
        {
          if( _context.createOrUpdate<%= entity.data_module.name %><%= entity.name %>( mappingSourceCode, result ) )
          {
            recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount", 1 );
          }
          else
          {
            recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateCount", 1 );
          }
        }
        catch ( final <%= data_module.exception_by_name(:BadSyncSequence).ee.qualified_name %> e )
        {
          // Not an error as hopefully another ordering of updates will allow this to proceed
          errors.add( result );
          lastException = e;
        }
        catch ( final Exception e )
        {
          errors.add( result );
          recordSyncError( recorder, 1, "Error synchronizing <%= entity.qualified_name %> updates", e );
          lastException = e;
        }
      }
    }
  }
<% end -%>
<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private java.util.List<Object[]> query<%= entity.data_module.name %><%= entity.name %>Removals( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    try
    {
      return _context.query<%= entity.data_module.name %><%= entity.name %>Removals( mappingSourceCode );
    }
    catch ( final Exception e )
    {
      recordSyncError( recorder, 1, "Error retrieving set of <%= entity.qualified_name %> to remove", e );
      throw e;
    }
  }

  @java.lang.SuppressWarnings( "unchecked" )
  private int mark<%= entity.data_module.name %><%= entity.name %>RemovalsPreSync( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    try
    {
      int count = 0;
      while ( true )
      {
        final int stepCount =_context.mark<%=entity.data_module.name%><%=entity.name%>RemovalsPreSync(mappingSourceCode);
        if ( 0 == stepCount )
        {
          return count;
        }
        recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UnsyncRemovals", stepCount);
        count = count + stepCount;
      }
    }
    catch ( final Exception e )
    {
      recordSyncError( recorder, 1, "Error updating unsynchronized and removed <%= entity.qualified_name %> instances", e );
      throw e;
    }
  }

  private void synchronize<%= entity.data_module.name %><%= entity.name %>Removals( @javax.annotation.Nonnull final String mappingSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    // loop until no unprocessed entities or only entities
    // unprocessed are those with errors
    final java.util.ArrayList<Object[]> errors = new java.util.ArrayList<>();
    while( true )
    {
      // Consider allowing chunking/limits to limit memory pressure of large syncs
      final java.util.List<Object[]> results = query<%= entity.data_module.name %><%= entity.name %>Removals( mappingSourceCode, recorder );
      if ( results.isEmpty() || errors.size() == results.size() )
      {
        return;
      }
      errors.clear();
      for ( final Object[] result : results )
      {
        try
        {
          if ( _context.remove<%= entity.data_module.name %><%= entity.name %>( (Integer) result[ 0 ], ( <%= entity.primary_key.jpa.java_type(:boundary) %> ) result[ 1 ] ) )
          {
            recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveCount", 1 );
          }
        }
        catch ( final Exception e )
        {
          errors.add( result );
          recordSyncError( recorder, 1, "Error synchronizing <%= entity.qualified_name %> removals", e );
        }
      }
    }
  }
<% end -%>
}

/* DO NOT EDIT: File is auto-generated */
package <%= to_package(struct.ee.qualified_name) %>;

<%= description_javadoc_for(struct, "") %>@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"EI_EXPOSE_REP", "EI_EXPOSE_REP2"})
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.UselessParentheses" } )
<%= jackson_class_annotations(struct) if struct.jackson? -%>
<%= jaxb_class_annotations(struct) if struct.jaxb? -%>

public <%= struct.abstract? ? "abstract " : "" %>class <%= struct.ee.name %>
<%= struct.extends ?
  "    extends #{struct.data_module.struct_by_name(struct.extends).ee.qualified_name}\n" :
  "    implements java.io.Serializable" %>
{
  private static final long serialVersionUID = 1;

<% struct.fields.each do |field| -%>
<%= "  " + jackson_field_annotation(field) if field.jackson? -%>
<%= "  " + jaxb_field_annotation(field) if field.jaxb? -%>
  <%= annotated_type(field, :ee, :boundary, :private => true) %> <%= Domgen::Naming.camelize(field.name) %>;
<% end -%>

<% if struct.fields.size != 0 %>
  /**
   * This constructor is present for deserialization mechanisms and should not be called directly.
   *
   * @deprecated
   */
  @java.lang.Deprecated
  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"})
  public <%= struct.name %>()
  {
  }
<% end %>

<% if struct.data_module.jmx? -%>  @java.beans.ConstructorProperties({<%= struct.fields.collect {|field| "\"#{javabean_property_name(field.name)}\""}.join(", ") %>})<% end -%>
  public <%= struct.name %>( <%= struct.fields.collect {|field| "#{annotated_type(field, :ee, :boundary, :final => true)} #{Domgen::Naming.camelize(field.name)}" }.join(", ") %> )
  {
<% if struct.extends
%>    super( <%=struct.fields.select{ |field| field.inherited? }.collect{ |field| "#{Domgen::Naming.camelize(field.name)}" }.join(", ") %> );
<% end
%>
<% struct.fields.select{ |field| !field.inherited? }.each do |field|
     null_protection = field.nullable? ? "#{Domgen::Naming.camelize(field.name)} == null ? null : " : ""
     if :sequence == field.collection_type
%>    this.<%= Domgen::Naming.camelize(field.name) %> = <%= null_protection %>java.util.Collections.unmodifiableList( new java.util.ArrayList<<%= field.ee.java_component_type %>>( <%= Domgen::Naming.camelize(field.name) %> ) );
<%     elsif :set == field.collection_type
%>    this.<%= Domgen::Naming.camelize(field.name) %> = <%= null_protection %>java.util.Collections.unmodifiableSet( new java.util.HashSet<<%= field.ee.java_component_type %>>( <%= Domgen::Naming.camelize(field.name) %> ) );
  <%     else
%>    this.<%= Domgen::Naming.camelize(field.name) %> = <%= Domgen::Naming.camelize(field.name) %>;
<%   end
   end
%>  }
<% struct.fields.select{ |field| !field.inherited? }.each do |field|
%>
  <%= annotated_type(field, :ee, :boundary, :public => true, :final => true) %> <%= getter_prefix(field) %><%= field.name %>()
  {
    return <%= Domgen::Naming.camelize(field.name) %>;
  }
<% end
%>

  @java.lang.Override
  public boolean equals( final Object o )
  {
    if ( this == o )
    {
      return true;
    }
    if ( o == null || getClass() != o.getClass() )
    {
      return false;
    }

    final <%= struct.ee.name %> that = (<%= struct.ee.name %>) o;
<% struct.fields.select{|f|!f.collection?}.each do |field| -%>
    if ( <%= field.ee.primitive?(:boundary) ? "#{Domgen::Naming.camelize(field.name)} != that.#{Domgen::Naming.camelize(field.name)}" : "#{field.nullable? ? "null == #{Domgen::Naming.camelize(field.name)} ? null != that.#{Domgen::Naming.camelize(field.name)} : " : ''}!#{Domgen::Naming.camelize(field.name)}.equals( that.#{Domgen::Naming.camelize(field.name)} )" %> )
    {
      return false;
    }
<% end -%>
<% struct.fields.select{|f|f.collection?}.each do |field| -%>
<% if field.nullable? -%>
    if ( (null ==  <%= Domgen::Naming.camelize(field.name) %> && null !=  that.<%= Domgen::Naming.camelize(field.name) %>) || (null !=  <%= Domgen::Naming.camelize(field.name) %> && null ==  that.<%= Domgen::Naming.camelize(field.name) %>) )
    {
      return false;
    }
    else if ( null != <%= Domgen::Naming.camelize(field.name) %> )
<% end -%>
    {
      if ( <%= Domgen::Naming.camelize(field.name) %>.size() != that.<%= Domgen::Naming.camelize(field.name) %>.size() )
      {
        return false;
      }
      for ( final <%= field.ee.java_component_type %> v : <%= Domgen::Naming.camelize(field.name) %> )
      {
        if ( !that.<%= Domgen::Naming.camelize(field.name) %>.contains( v ) )
        {
          return false;
        }
      }
    }
<% end -%>
    return true;
  }

  @java.lang.Override
  public int hashCode()
  {
    int result = 0;
<% struct.fields.each do |field| -%>
    result = 31 * result + (<%= field.ee.primitive?(:boundary) ? (field.boolean? ? "#{Domgen::Naming.camelize(field.name)} ? 1 : 0": field.real? ? "Float.floatToIntBits(#{Domgen::Naming.camelize(field.name)})" : field.long? ? "(int)(#{Domgen::Naming.camelize(field.name)})" : Domgen::Naming.camelize(field.name)) : "#{field.nullable? ? "null == #{Domgen::Naming.camelize(field.name)} ? 0 : " : ''}#{Domgen::Naming.camelize(field.name)}.hashCode()" %>);
<% end -%>
    return result;
  }
}

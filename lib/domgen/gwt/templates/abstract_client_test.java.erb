/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_abstract_client_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "PMD.SystemPrintln" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS", "STT_TOSTRING_STORED_IN_FIELD", "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" } )
<% if repository.arez? -%>
@arez.testng.ActionWrapper( enable = true )
<% end -%>
public abstract class <%= repository.gwt.abstract_client_test_name %><T extends <%= repository.gwt.qualified_abstract_test_sting_injector_name %>>
<% if repository.arez? -%>
  implements arez.testng.ArezTestSupport
<% end -%>
{
  @javax.annotation.Nonnull
  private final java.util.List<java.lang.Runnable> _asyncActions = new java.util.ArrayList<>();
<% repository.data_modules.select{|data_module|data_module.arez?}.each do |data_module| -%>
  @javax.annotation.Nonnull
  protected <%= data_module.arez.qualified_test_factory_name %> <%= data_module.arez.short_test_code %>;
<% end -%>
  private T _injector;

  @javax.annotation.Nonnull
  protected abstract T createInjector();

  @javax.annotation.Nonnull
  protected T getInjector()
  {
    return _injector;
  }

  @org.testng.annotations.BeforeMethod
<% if repository.arez? -%>
  @java.lang.Override
<% end -%>
  public void preTest()
    throws Exception
  {
    <%= repository.gwt.qualified_value_util_name %>.reset();
<% if repository.arez? -%>
    arez.testng.ArezTestSupport.super.preTest();
<% if repository.imit? -%>
    replicant.ReplicantTestUtil.resetConfig( false );
<% end -%>
<% end -%>
    _injector = createInjector();
<% repository.data_modules.select{|data_module|data_module.arez?}.each do |data_module| -%>
    <%= data_module.arez.short_test_code %> = _injector.<%= Reality::Naming.camelize(data_module.name) %>Factory().get();
<% end -%>
<% if repository.arez? -%>
    arez.Arez.context().registerLocator( _injector.getLocator() );
<% end -%>
<% if repository.imit? -%>
    replicant.Replicant.context().registerConnector( getInjector().getSystemSchema(), new TestTransport() );
    pumpAllAsyncActions();
<% end -%>
  }
<% if repository.arez? -%>

  @org.testng.annotations.AfterMethod
<% if repository.arez? -%>
  @java.lang.Override
<% end -%>
  public void postTest()
  {
<% if repository.arez? -%>
<% if repository.imit? -%>
    replicant.ReplicantTestUtil.resetConfig( false );
<% end -%>
    arez.testng.ArezTestSupport.super.postTest();
<% end -%>
  }
<% end -%>
<% repository.gwt.test_class_contents.each do |content| -%>
<%= content -%>
<% end -%>

  protected final void assertAsyncActionCount( final int count )
  {
    org.testng.Assert.assertEquals( _asyncActions.size(), count );
  }

  protected final void pumpSingleAsyncAction()
  {
    org.testng.Assert.assertTrue( _asyncActions.size() > 1 );
    _asyncActions.remove( 0 ).run();
  }

  protected final void pumpAsyncActions( final int count )
  {
    assertAsyncActionCount( count );
    pumpAllAsyncActions();
  }

  protected final void pumpAllAsyncActions()
  {
    while( !_asyncActions.isEmpty() )
    {
      _asyncActions.remove( 0 ).run();
    }
    _asyncActions.clear();
  }

  protected final void queueAsyncActions( @javax.annotation.Nonnull final java.lang.Runnable action )
  {
    _asyncActions.add( action );
  }

  protected final int randomInt()
  {
    return <%= repository.gwt.qualified_value_util_name %>.randomInt();
  }

  protected final boolean randomBoolean()
  {
    return <%= repository.gwt.qualified_value_util_name %>.randomBoolean();
  }

  protected final int nextId()
  {
    return <%= repository.gwt.qualified_value_util_name %>.nextId();
  }

  @javax.annotation.Nonnull
  protected final java.util.Date now()
  {
    return <%= repository.gwt.qualified_value_util_name %>.now();
  }

  @javax.annotation.Nonnull
  protected final String randomString()
  {
    return <%= repository.gwt.qualified_value_util_name %>.randomString();
  }

  @javax.annotation.Nonnull
  protected final String randomString( final int stringLength )
  {
    return <%= repository.gwt.qualified_value_util_name %>.randomString( stringLength );
  }
<% if repository.imit? -%>

  public class TestTransport
    extends replicant.AbstractTransport
  {
    @java.lang.Override
    protected void doConnect()
    {
      queueAsyncActions( () -> onMessageReceived( replicant.messages.SessionCreatedMessage.create( randomString() ) ) );
    }

    @java.lang.Override
    protected void sendRemoteMessage( @javax.annotation.Nonnull final Object message )
    {
    }

    @java.lang.Override
    protected void doDisconnect()
    {
      queueAsyncActions( () -> onDisconnect() );
    }
  }
<% end -%>
}

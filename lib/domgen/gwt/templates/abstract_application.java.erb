/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_abstract_application_name) %>;

@SuppressWarnings( { "PMD.ConstructorCallsOverridableMethod" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "STT_STRING_PARSING_A_FIELD", "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS", "PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS", "ACEM_ABSTRACT_CLASS_EMPTY_METHODS" } )
public abstract class <%= repository.gwt.abstract_application_name %><I extends <%= repository.gwt.qualified_abstract_sting_injector_name %>>
{
<% if repository.keycloak? || repository.imit? -%>
  @javax.annotation.Nonnull
  private final String _applicationURL;
<% end -%>
<% if repository.keycloak? -%>
  @javax.annotation.Nonnull
  private final org.realityforge.gwt.keycloak.Keycloak _keycloak;
<% end -%>
<% if repository.imit? && repository.keycloak? -%>
  private zemeckis.Cancelable _updateReplicantTokenTask;
<% end -%>
<% if repository.serviceworker? -%>
  private zemeckis.Cancelable _serviceWorkerUpdateTask;
<% end -%>

  protected <%= repository.gwt.abstract_application_name %>(<% if repository.keycloak? -%> @javax.annotation.Nonnull final String keycloakClient <% end -%>)
  {
    _applicationURL = calculateApplicationURL();
<% if repository.keycloak? -%>
    _keycloak = new org.realityforge.gwt.keycloak.Keycloak( keycloakClient, _applicationURL + ".keycloak/" + keycloakClient + "/keycloak.json" );
    org.realityforge.gwt.keycloak.cache.TokenCache.configure( _keycloak );
    _keycloak.addKeycloakListener( new org.realityforge.gwt.keycloak.cache.TokenCachingListener() );
    _keycloak.addKeycloakListener( newKeycloakListener() );
<% end -%>
  }

<% if (repository.imit? && repository.keycloak?) || repository.serviceworker? -%>
<% if repository.arez? -%>
  @arez.annotations.PreDispose
<% end -%>
  protected void preDispose()
  {
<% if repository.imit? && repository.keycloak? -%>
    if ( null != _updateReplicantTokenTask )
    {
      _updateReplicantTokenTask.cancel();
      _updateReplicantTokenTask = null;
    }
<% end -%>
<% if repository.serviceworker? -%>
    if ( null != _serviceWorkerUpdateTask )
    {
      _serviceWorkerUpdateTask.cancel();
      _serviceWorkerUpdateTask = null;
    }
<% end -%>
  }

<% end -%>
  @javax.annotation.Nonnull
  protected final String getApplicationURL()
  {
    return _applicationURL;
  }

  @javax.annotation.Nonnull
  protected String calculateApplicationURL()
  {
    if ( isSuperDevMode() )
    {
      // As the code is generated by codeserver we just guess that the application url is where the host page is
      return com.google.gwt.core.client.GWT.getHostPageBaseURL();
    }
    else
    {
      // Assume that the root of the application is the parent directory where the module is stored
      return com.google.gwt.core.client.GWT.getModuleBaseURL().substring( 0, com.google.gwt.core.client.GWT.getModuleBaseURL().length() - com.google.gwt.core.client.GWT.getModuleName().length() - 1 );
    }
  }

  @javax.annotation.Nullable
  protected abstract I getInjector();

  @javax.annotation.Nonnull
  protected final I ensureInjector()
  {
    final I injector = getInjector();
    assert null != injector;
    return injector;
  }

  public void init()
  {
<% if repository.keycloak? -%>
    getKeycloak().init();
<% else -%>
    start();
<% end -%>
  }

  public void start()
  {
<% if repository.serviceworker? -%>
    setupServiceWorker();
<% end -%>
<% if repository.imit? -%>
    prepareReplicant();
<% end -%>
    setupUncaughtExceptionHandler();
    performStart();
  }

  protected void postInjectorSetup()
  {
<% if repository.arez? -%>
    initializeArez();
<% end -%>
<% if repository.imit? -%>
    initializeReplicant();
<% end -%>
  }
<% if repository.imit? -%>

  protected void initializeReplicant()
  {
    registerReplicantConnector( getApplicationURL() + "api", ensureInjector().getSystemSchema() );
    if ( replicant.Replicant.areSpiesEnabled() )
    {
      final akasha.Storage storage = akasha.WindowGlobal.isLocalStorageSupported() ? akasha.WindowGlobal.localStorage() : null;
      if ( null != storage && "true".equals( storage.getItem( "<%= Reality::Naming.pascal_case(repository.name) %>.Replicant.Spy.Enabled" ) ) )
      {
        replicant.spy.tools.ReplicantSpyUtil.enableSpyEventLogging();
        akasha.Console.log( "Enabling Replicant Spy Logger at startup as it was left enabled when this application previously ran" );
      }
      akasha.WindowGlobal.document().addEventListener( "keydown", e ->
      {
        if ( e instanceof akasha.KeyboardEvent )
        {
          final akasha.KeyboardEvent event = (akasha.KeyboardEvent) e;
          if ( event.shiftKey() && event.ctrlKey() && "R".equals( event.key() ) )
          {
            if ( replicant.spy.tools.ReplicantSpyUtil.isSpyEventLoggingEnabled() )
            {
              if ( null != storage )
              {
                storage.removeItem( "<%= Reality::Naming.pascal_case(repository.name) %>.Replicant.Spy.Enabled" );
              }
              replicant.spy.tools.ReplicantSpyUtil.disableSpyEventLogging();
              akasha.Console.log( "Disabled Replicant Spy Logger" );
            }
            else
            {
              if ( null != storage )
              {
                storage.setItem( "<%= Reality::Naming.pascal_case(repository.name) %>.Replicant.Spy.Enabled", "true" );
              }
              replicant.spy.tools.ReplicantSpyUtil.enableSpyEventLogging();
              akasha.Console.log( "Enabled Replicant Spy Logger" );
            }
          }
        }
      } );
    }
  }
<% end -%>

  private void setupUncaughtExceptionHandler()
  {
    com.google.gwt.core.client.GWT.setUncaughtExceptionHandler( <%= repository.gwt.abstract_application_name %>.this::onUncaughtException );
  }
<% if repository.arez? -%>

  @javax.annotation.Nullable
  protected arez.spy.SpyEventHandler createArezSpyEventHandler()
  {
    return new arez.spytools.browser.react4j.ReactArezConsoleSpyEventProcessor();
  }

  protected void onObserverError( @javax.annotation.Nonnull final arez.Observer observer, @javax.annotation.Nonnull final arez.ObserverError error, @javax.annotation.Nullable final java.lang.Throwable throwable )
  {
    final String message =
      error + ": Error occurred on observer named " + ( arez.Arez.areNamesEnabled() ? observer.getName() : "?" );
    akasha.Console.error( message, throwable );
    if ( isSuperDevMode() )
    {
      jsinterop.base.Js.debugger();
    }
  }

  protected void initializeArez()
  {
    arez.Arez.context().addObserverErrorHandler( this::onObserverError );
    arez.Arez.context().registerLocator( ensureInjector().getLocator() );

    if ( arez.Arez.areSpiesEnabled() )
    {
      final akasha.Storage storage = akasha.WindowGlobal.isLocalStorageSupported() ? akasha.WindowGlobal.localStorage() : null;
      if ( null != storage && "true".equals( storage.getItem( "<%= Reality::Naming.pascal_case(repository.name) %>.Arez.Spy.Enabled" ) ) )
      {
        arez.spytools.browser.BrowserSpyUtil.enableSpyEventLogging();
      }
      akasha.WindowGlobal.document().addEventListener( "keydown", e ->
      {
        if ( e instanceof akasha.KeyboardEvent )
        {
          final akasha.KeyboardEvent event = (akasha.KeyboardEvent) e;
          if ( event.shiftKey() && event.ctrlKey() && "A".equals( event.key() ) )
          {
            if ( arez.spytools.browser.react4j.ReactArezSpyUtil.isSpyEventLoggingEnabled() )
            {
              if ( null != storage )
              {
                storage.removeItem( "<%= Reality::Naming.pascal_case(repository.name) %>.Arez.Spy.Enabled" );
              }
              arez.spytools.browser.react4j.ReactArezSpyUtil.disableSpyEventLogging();
              akasha.Console.log( "Disabled Arez Spy Logger" );
            }
            else
            {
              if ( null != storage )
              {
                storage.setItem( "<%= Reality::Naming.pascal_case(repository.name) %>.Arez.Spy.Enabled", "true" );
              }
              arez.spytools.browser.BrowserSpyUtil.enableSpyEventLogging();
              akasha.Console.log( "Enabled Arez Spy Logger" );
            }
          }
        }
      } );
    }
  }
<% end -%>
<% if repository.serviceworker? -%>

  private void setupServiceWorker()
  {
    final akasha.Navigator navigator = akasha.WindowGlobal.navigator();
    if ( navigator.isServiceWorkerSupported() && !isSuperDevMode() )
    {
      final akasha.ServiceWorkerContainer serviceWorker = navigator.serviceWorker();
      serviceWorker
        .register( com.google.gwt.core.client.GWT.getModuleBaseForStaticFiles() + com.google.gwt.core.client.GWT.getModuleName() + "-sw.js" )
        .then( registration -> {
          akasha.Console.log( "ServiceWorker registration successful with scope: " + registration.scope() );

          // Every minute attempt to update the serviceWorker. If it does update
          // then the "controllerchange" event will fire.
          _serviceWorkerUpdateTask = zemeckis.Zemeckis.periodicTask( zemeckis.Zemeckis.areNamesEnabled() ? "ServiceWorkerUpdateTask" : null, registration::update, 60000 );
          return null;
        }, error -> {
          akasha.Console.log( "ServiceWorker registration failed: ", error );
          return null;
        } );
      serviceWorker.addControllerchangeListener( e -> {
        // This fires when the service worker controlling this page
        // changes, eg a new worker has skipped waiting and become
        // the new active worker.
        akasha.Console.log( "ServiceWorker updated ", e );
        onServiceWorkerUpdateReady();
      } );
    }
  }

  protected abstract void onServiceWorkerUpdateReady();
<% end -%>

  protected abstract void performStart();

  protected void onUncaughtException( @javax.annotation.Nonnull final Throwable e )
  {
    if( com.google.gwt.core.client.GWT.isScript() && com.google.gwt.core.client.GWT.isProdMode() )
    {
      logThrowable( e  );
    }
  }

  @javax.annotation.Nonnull
  protected java.util.Collection<Throwable> unwrapThrowable( @javax.annotation.Nonnull final Throwable e )
  {
    return java.util.Collections.emptyList();
  }

  protected boolean shouldLogThrowableToConsole( @javax.annotation.Nonnull final Throwable e )
  {
    return true;
  }

  private void logThrowable( @javax.annotation.Nonnull final Throwable e )
  {
    if ( shouldLogThrowableToConsole( e ) )
    {
      akasha.Console.error( getStackTrace( e ) );
    }
    unwrapThrowable( e ).forEach( this::logThrowable );
  }

  @javax.annotation.Nonnull
  private java.lang.String getStackTrace( @javax.annotation.Nonnull final java.lang.Throwable throwable )
  {
    final java.lang.StringBuilder result = new java.lang.StringBuilder();
    result.append( throwable );
    result.append( '\n' );

    for ( final java.lang.StackTraceElement element : throwable.getStackTrace() )
    {
      result.append( "\tat " );
      result.append( element );
      result.append( '\n' );
    }

    final java.lang.Throwable cause = throwable.getCause();
    if ( null != cause && cause != throwable )
    {
      result.append( "Caused by: " );
      result.append( getStackTrace( cause ) );
    }

    return result.toString();
  }

<% if repository.keycloak? -%>

  @javax.annotation.Nonnull
  public org.realityforge.gwt.keycloak.Keycloak getKeycloak()
  {
    return _keycloak;
  }

  @javax.annotation.Nonnull
  protected org.realityforge.gwt.keycloak.KeycloakListener newKeycloakListener()
  {
    return new ApplicationKeycloakListener();
  }

  protected class ApplicationKeycloakListener
    extends org.realityforge.gwt.keycloak.KeycloakListenerAdapter
  {
    @Override
    public void onReady( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak, final boolean authenticated )
    {
      if ( authenticated )
      {
        start();
      }
      else
      {
        keycloak.login();
      }
    }
  }
<% end -%>
<% if repository.imit? -%>
<% if repository.keycloak? -%>

  private void updateReplicantToken()
  {
    replicant.Replicant.context().setAuthToken( getKeycloak().getToken() );
  }

<% end -%>
  protected final void registerReplicantConnector( @javax.annotation.Nonnull final String baseURL, @javax.annotation.Nonnull final replicant.SystemSchema schema )
  {
    final replicant.WebSocketConfig config = replicant.WebSocketConfig.create( baseURL, getKeycloak() );
    replicant.Replicant.context().registerConnector( schema, new replicant.WebSocketTransport( config ) );
  }

  private void prepareReplicant()
  {
    // Make sure context and any static initializers have run to avoid
    // triggering schedulers during injector construction
    replicant.Replicant.context();
    replicant.WebStorageCacheService.install();
    akasha.WindowGlobal.addBeforeunloadListener( e -> replicant.Replicant.context().deactivate(), true );
<% if repository.keycloak? -%>
    updateReplicantToken();
    _updateReplicantTokenTask = zemeckis.Zemeckis.periodicTask( zemeckis.Zemeckis.areNamesEnabled() ? "ReplicantKeycloakTokenUpdater" : null, () -> getKeycloak().updateToken( 30, this::updateReplicantToken ), 5000 );
<% end -%>
  }
<% end -%>

  protected final boolean isSuperDevMode()
  {
    return "on".equals( java.lang.System.getProperty( "superdevmode" ) );
  }
}

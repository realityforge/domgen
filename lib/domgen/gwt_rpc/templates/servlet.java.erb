/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.gwt_rpc.qualified_servlet_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "DuplicatedCode", "ReassignedVariable", "PMD.UnusedPrivateField", "PMD.UnusedLocalVariable", "PMD.FieldDeclarationsShouldBeAtStartOfClass", "PMD.UnnecessaryLocalBeforeReturn", "PMD.LocalVariableCouldBeFinal", "PMD.DoNotThrowExceptionInFinally", "PMD.PreserveStackTrace", "PMD.LocalVariableNamingConventions", "PMD.FormalParameterNamingConventions" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "SE_TRANSIENT_FIELD_NOT_RESTORED", "BED_HIERARCHICAL_EXCEPTION_DECLARATION", "EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS", "FCBL_FIELD_COULD_BE_LOCAL", "LEST_LOST_EXCEPTION_STACK_TRACE", "NFF_NON_FUNCTIONAL_FIELD", "EXS_EXCEPTION_SOFTENING_HAS_CHECKED", "EXS_EXCEPTION_SOFTENING_NO_CHECKED", "USBR_UNNECESSARY_STORE_BEFORE_RETURN", "PSC_PRESIZE_COLLECTIONS", "UEC_USE_ENUM_COLLECTIONS" } )
@javax.servlet.annotation.WebServlet( name = "<%= service.data_module.name %>.<%= service.gwt_rpc.servlet_name %>", urlPatterns = { <%= service.gwt_rpc.servlet_name %>.API_URL } )
public class <%= service.gwt_rpc.servlet_name %>
  extends com.google.gwt.user.server.rpc.RemoteServiceServlet
  implements <%= service.gwt_rpc.qualified_rpc_service_name %>
{
  @javax.annotation.Nonnull
  public static final String API_URL = "/<%= service.gwt_rpc.api_url %>";
  @java.io.Serial
  private static final long serialVersionUID = 1;
  private static final int INITIAL_STATE = 0;
  private static final int PRE_READ_STATE = 1;
  private static final int BEFORE_REQUEST_DESERIALIZED = 2;
  private static final int AFTER_REQUEST_DESERIALIZED = 3;
  private static final int AFTER_RESPONSE_SERIALIZED = 4;
<% if service.methods.any?{|method| method.gwt_rpc? && (method.parameters.any?{|p| p.date?} || method.return_value.date?)} -%>
  private static final java.time.format.DateTimeFormatter LOCAL_DATE = new java.time.format.DateTimeFormatterBuilder()
    .appendValue( java.time.temporal.ChronoField.YEAR, 4, 10, java.time.format.SignStyle.EXCEEDS_PAD )
    .appendLiteral( '-' )
    .appendValue( java.time.temporal.ChronoField.MONTH_OF_YEAR, 1, 2, java.time.format.SignStyle.NOT_NEGATIVE )
    .appendLiteral( '-' )
    .appendValue( java.time.temporal.ChronoField.DAY_OF_MONTH, 1, 2, java.time.format.SignStyle.NOT_NEGATIVE )
    .toFormatter();
<% end -%>
<% if service.methods.any?{|method| method.return_value.struct? || method.parameters.any?{|p|p.struct?}} %>
  @javax.annotation.Nonnull
  private transient final com.fasterxml.jackson.databind.ObjectMapper _jsonMapper = new com.fasterxml.jackson.databind.ObjectMapper();
<% end -%>
  @javax.annotation.Nonnull
  private transient final java.lang.ThreadLocal<java.lang.Integer> _requestState = java.lang.ThreadLocal.withInitial( () -> INITIAL_STATE );
  @javax.inject.Inject
  private transient <%= service.data_module.repository.gwt_rpc.qualified_code_server_config_name %> _codeServerConfig;
  @javax.inject.Inject
  private transient <%= service.ejb.generate_boundary? ? service.ejb.qualified_boundary_interface_name : service.ejb.qualified_service_name %> _service;
<% if  service.methods.any?{|method| method.action?} -%>
  @javax.inject.Inject
  private transient iris.rose.server.action.LocalActionTraceServiceBoundary _actionTraceService;
  @javax.inject.Inject
  private transient iris.rose.server.core.RoseAuthService _roseAuthService;
<% end -%>

  @javax.annotation.Nullable
  @Override
  protected String getCodeServerPolicyUrl( @javax.annotation.Nonnull final String strongName )
  {
    return _codeServerConfig.getCodeServerPolicyUrl( strongName );
  }

  @Override
  protected com.google.gwt.user.server.rpc.SerializationPolicy doGetSerializationPolicy( @javax.annotation.Nonnull final javax.servlet.http.HttpServletRequest request,
                                                                                         @javax.annotation.Nonnull final String moduleBase,
                                                                                         @javax.annotation.Nonnull final String strongName )
  {
    java.net.URL moduleBaseURL;
    try
    {
      moduleBaseURL = new java.net.URL( moduleBase );
    }
    catch ( final java.net.MalformedURLException e )
    {
      // log the information, we will default
      log( "Malformed moduleBaseURL: " + moduleBase, e );
      return null;
    }

    final String contextPath = request.getContextPath();
    java.io.InputStream stream;
    String path;
    if ( moduleBaseURL.getPath().startsWith( contextPath ) )
    {
      final String contextRelativePath = moduleBaseURL.getPath().substring( contextPath.length() );
      path = contextRelativePath + strongName + ".gwt.rpc";
      stream = getServletContext().getResourceAsStream( path );
    }
    else
    {
      path = moduleBaseURL.toExternalForm() + strongName + ".gwt.rpc";
      try
      {
        stream = new java.net.URL( path ).openStream();
      }
      catch ( final java.io.IOException e )
      {
        log( "ERROR: Failed to read the remote policy file '" + path + "'", e );
        return null;
      }
    }
    if ( null != stream )
    {
      try ( java.io.InputStream input = stream )
      {
        return com.google.gwt.user.server.rpc.SerializationPolicyLoader.loadFromStream( input, null );
      }
      catch ( final java.text.ParseException e )
      {
        log( "ERROR: Failed to parse the policy file '" + path + "'", e );
      }
      catch ( final java.io.IOException e )
      {
        log( "ERROR: Could not read the policy file '" + path + "'", e );
      }
    }
    // If CodeServerPolicyUrl is available then we are probably in development and thus
    // the policies are not expected to be part of the deployment
    else if ( null == getCodeServerPolicyUrl( strongName ) )
    {
      final String message =
        "ERROR: The serialization policy file '" + path + "' was not found; " +
        "did you forget to include it in this deployment?";
      log( message );
    }

    return null;
  }

<% service.methods.select{|method| method.gwt_rpc?}.each do |method|
%>  @java.lang.Override
  <%= annotated_type(method.return_value, :gwt_rpc, :transport, :public => true) %> <%= method.gwt_rpc.name %>(<%= method.parameters.select{|parameter| !parameter.gwt_rpc.environmental?}.collect{|p| "#{annotated_type(p, :gwt_rpc, :transport, :final => true)} #{p.gwt_rpc.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.base_exceptions.collect{|e| e.gwt_rpc.qualified_name}.join(', ')}"
%>
  {
<% if method.imit? -%>
    boolean headerSet = false;
    @javax.annotation.Nullable
    String replicationComplete = null;
<% end -%>
<% method.parameters.select{|p|!p.collection? && p.struct?}.each do |parameter| -%>
    final <%= parameter.referenced_struct.ee.qualified_name %> $<%= parameter.name %>;
<% end %>
<% method.parameters.select{|p|p.collection? && (p.date? || p.enumeration?|| p.struct?)}.each do |parameter| -%>
    <%= annotated_type(parameter, :ejb, :boundary, :final => true) %> $<%= parameter.name %>;
<% end -%>
<% if method.action? || method.imit? || method.exceptions.size > 0 -%>
    java.lang.Throwable cause = null;
    try
    {
<% end -%>
<% if method.parameters.any?{|p| p.struct?} -%>
      try
      {
<% end %>
<%
   return_prefix = ''
   return_postfix = ''
   if method.return_value.return_type != :void
     return_prefix = "#{annotated_type(method.return_value, :ejb, :boundary, :final => true)} returnValue = "
     transform = nil
     if method.return_value.date?
       transform = "#{repository.gwt.qualified_rdate_name}.fromDate( returnValue )"
     elsif method.return_value.enumeration?
       if method.return_value.enumeration.numeric_values?
         transform = 'returnValue.ordinal()'
       else
         transform = 'returnValue.name()'
       end
     elsif method.return_value.struct?
       transform = '_jsonMapper.writeValueAsString( returnValue )'
     end

     if !method.return_value.collection?
       if method.return_value.nullable? && transform
         transform = "(null == returnValue ? null : #{transform})"
       end
       return_postfix = "return #{transform || 'returnValue'};"
     elsif method.return_value.date? || method.return_value.enumeration? || method.return_value.struct?
       return_postfix =''
       return_postfix << "#{annotated_type(method.return_value, :ejb, :transport, :final => true)} $returnValue = #{method.return_value.nullable? ? 'null == returnValue ? null : ' : '' }new java.util.#{method.return_value.collection_type == :set ? 'HashSet' : 'ArrayList' }<>();\n"
       return_postfix << "  if( null != returnValue )\n    {\n" if method.return_value.nullable?
       return_postfix << <<LOOP
    for( final #{method.return_value.ejb.java_component_type(:boundary) } k: returnValue )
    {
      $returnValue.add(
LOOP
         if method.return_value.date?
           return_postfix << '#{repository.gwt.qualified_rdate_name}.fromDate( k )'
         elsif method.return_value.struct?
           return_postfix << '_jsonMapper.writeValueAsString( k )'
         elsif method.return_value.enumeration.numeric_values?
           return_postfix << 'k.ordinal()'
         elsif method.return_value.enumeration.textual_values?
           return_postfix << 'k.name()'
         end
         return_postfix << ");\n    }\n"
         return_postfix << "    }\n" if method.return_value.nullable?
         return_postfix << "return $returnValue;\n"
       else
         return_postfix = 'return returnValue;'
       end
       if method.return_value.struct?
        return_postfix = "try {\n #{return_postfix} \n} catch ( final java.io.IOException ioe ) { #{method.imit? || method.exceptions.size > 0 ? 'cause = ioe; ' : ''}throw new IllegalArgumentException( ioe.getMessage(), ioe ); }"
       end
   end
   methodParamString = method.parameters.collect do |p|
    if p.gwt_rpc.environmental?
      value = p.gwt_rpc.environment_value
    elsif p.struct? || (p.collection? && (p.date? || p.enumeration?|| p.struct?))
      value = "$#{p.name}"
    else
      transform = nil
      if p.date?
        transform = "java.sql.Date.valueOf( java.time.LocalDate.parse( #{p.gwt_rpc.name}, LOCAL_DATE ) )"
      elsif p.enumeration?
        if p.enumeration.numeric_values?
          transform = "#{p.enumeration.ee.qualified_name}.values()[ #{p.gwt_rpc.name} ]"
        else
          transform = "#{p.enumeration.ee.qualified_name}.valueOf( #{p.gwt_rpc.name} )"
        end
      end
      if p.nullable? && transform
        transform = "(null == #{p.gwt_rpc.name} ? null : #{transform})"
      end
      value = transform || p.gwt_rpc.name
    end
    value
  end.join(', ')
-%>
<% method.parameters.select{|p|p.struct? && !p.collection?}.each do |parameter| -%>
    $<%= parameter.name %> = <%= parameter.nullable? ? "null == #{parameter.name} ? null : " : "" %>_jsonMapper.readValue( <%= parameter.name %>, <%= parameter.ejb.java_type %>.class );
<% end -%>
<% method.parameters.select{|p|p.collection? && (p.date? || p.enumeration?|| p.struct?)}.each do |parameter| %>
    $<%= parameter.name %> = <%= parameter.nullable? ? "null == #{parameter.name} ? null : " : '' %>new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><>();
    <% if parameter.nullable? -%>if( null != <%= parameter.name %> ) {<% end %>
    for( final <%= parameter.ejb.java_component_type(:transport) %> k: <%= parameter.name %> )
    {
<% param_value =
         if parameter.date?
            'java.sql.Date.valueOf( java.time.LocalDate.parse( k, LOCAL_DATE ) )'
         elsif parameter.enumeration?
           parameter.enumeration.numeric_values? ?
             "#{parameter.enumeration.ee.qualified_name}.values()[ k ]" :
             "#{parameter.enumeration.ee.qualified_name}.valueOf( k )"
         else
           "_jsonMapper.readValue( k, #{parameter.ejb.java_component_type}.class )"
         end
    -%>
$<%= parameter.name %>.add( <%= param_value %> );
    }
    <% if parameter.nullable? %>}<% end -%>
<% end -%>
<% if method.parameters.any?{|p| p.struct?} -%>
    }
    catch ( final java.io.IOException ioe )
    {
<% if method.imit? || method.exceptions.size > 0 -%>
    cause = ioe;
<% end -%>
      throw new IllegalArgumentException( ioe.getMessage(), ioe );
    }
<% end -%>
<% if method.imit? -%>
<% if !method.action? -%>
    org.realityforge.replicant.server.ee.ReplicantContextHolder.put( org.realityforge.replicant.server.ServerConstants.SESSION_ID_KEY, getThreadLocalRequest().getHeader( org.realityforge.replicant.shared.GwtRpcConstants.CONNECTION_ID_HEADER ) );
    org.realityforge.replicant.server.ee.ReplicantContextHolder.put( org.realityforge.replicant.server.ServerConstants.REQUEST_ID_KEY, null != getThreadLocalRequest().getHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_ID_HEADER ) ? getThreadLocalRequest().getIntHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_ID_HEADER ) : null );
<% end -%>
<% end -%>

<% if method.action? -%>
    // Queue the action
    final var replicantSessionId = getThreadLocalRequest().getHeader( org.realityforge.replicant.shared.GwtRpcConstants.CONNECTION_ID_HEADER );
    final var externalId = null != getThreadLocalRequest().getHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_ID_HEADER ) ? getThreadLocalRequest().getIntHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_ID_HEADER ) : null;
    final var actionSessionId = _actionTraceService.findOrCreateSession( _roseAuthService.getUsername(), iris.rose.server.action.SessionKind.REPLICANT, replicantSessionId );

    final var actionQueuedFeedback = ""; // TODO: Generate from params, or straight from architecture.rb, via _service
    final var actionTypeCode = <%= service.action.qualified_service_actions_name %>.<%= method.name %>Action.actionTypeCode();
    final var requestPayload = <%= service.action.qualified_service_actions_name %>.<%= method.name %>Action.encodeRequestPayload( <%= methodParamString %> );

    final var action = _actionTraceService.queueAction( actionSessionId,
                                                        actionTypeCode,
                                                        new java.util.Date(),
                                                        null == externalId ? null : String.valueOf( externalId ),
                                                        requestPayload.toString(),
                                                        actionQueuedFeedback );

    final var response = action.get();
<% if method.imit? -%>
    replicationComplete = response.isRpcComplete() ? "1" : "0";
<% end -%>
<% if method.return_value.return_type != :void -%>
    final var returnValue = <%= service.action.qualified_service_actions_name %>.<%= method.name %>Action.decodeResponsePayload( response.getResponsePayload() );
    <% else -%>
    // Decode response to check if exception was thrown
    <%= service.action.qualified_service_actions_name %>.<%= method.name %>Action.decodeResponsePayload( response.getResponsePayload() );
  <% end -%>
  <%= return_postfix %>
<% else -%>
    <%= return_prefix %>_service.<%= method.gwt_rpc.name %>(<%= methodParamString -%>);
    <% if method.imit? -%>
      replicationComplete = (String) org.realityforge.replicant.server.ee.ReplicantContextHolder.remove( org.realityforge.replicant.server.ServerConstants.REQUEST_COMPLETE_KEY );
    <% end -%>
    <%= return_postfix %>
<% end -%>
<% if method.action? || method.imit? || method.exceptions.size > 0 -%>
    }
<% end -%>
<% if method.action? -%>
  catch ( final iris.rose.server.action.InvalidActionTypeCodeException | iris.rose.server.action.InvalidRequestPayloadException | iris.rose.server.action.ExternalIdTooLongException | java.lang.InterruptedException | java.util.concurrent.ExecutionException e )
  {
<% if method.imit? -%>
      // Assume the exception caused a rollback and if the transaction has rolled back there will be no messages arriving
      getThreadLocalResponse().setHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_COMPLETE_HEADER, "1" );
      headerSet = true;
      cause = e;
<% end -%>
      throw new RuntimeException( e );
    }
<% end -%>
<% method.exceptions.each do |exception| -%>
    catch ( final <%= exception.ee.qualified_name %> e )
    {
      cause = e;
      throw new <%= exception.gwt_rpc.qualified_name %>( e.getMessage() );
    }
<% end -%>
<% if method.imit? -%>
    catch ( final javax.validation.ConstraintViolationException cve )
    {
      final java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append( "Pre-persist constraint violations:\n" );
      for ( final javax.validation.ConstraintViolation<?> constraintViolation : cve.getConstraintViolations() )
      {
        sb.append( constraintViolation.getPropertyPath() );
        sb.append( " -> " );
        sb.append( constraintViolation.getMessage() );
        sb.append( '\n' );
      }
      final javax.validation.ConstraintViolationException wrap = new javax.validation.ConstraintViolationException( sb.toString(), cve.getConstraintViolations() );
      wrap.initCause( cve );

      // Assume exception has caused a rollback and if the transaction has rolled back there will be no messages arriving
      getThreadLocalResponse().setHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_COMPLETE_HEADER, "1" );
      headerSet = true;
      cause = wrap;
      throw wrap;
    }
    catch ( final java.lang.RuntimeException e )
    {
      // Assume the exception caused a rollback and if the transaction has rolled back there will be no messages arriving
      getThreadLocalResponse().setHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_COMPLETE_HEADER, "1" );
      headerSet = true;
      cause = e;
      throw e;
    }
    finally
    {
      if ( !headerSet )
      {
        if( null != replicationComplete )
        {
          getThreadLocalResponse().setHeader( org.realityforge.replicant.shared.GwtRpcConstants.REQUEST_COMPLETE_HEADER, replicationComplete );
        }
        else
        {
          final String message = "Unable to find completion flag " + org.realityforge.replicant.server.ServerConstants.REQUEST_COMPLETE_KEY + " in ReplicantContextHolder. Servlet expects to invoke service with replication interceptor enabled.";
          throw new IllegalStateException( message, cause );
        }
      }
    }
<% end -%>
  }
<% end -%>
<%
has_cookie = service.methods.select{|method| method.gwt_rpc?}.any? do |method|
   method.parameters.any?{|p| p.gwt_rpc.environmental? && p.gwt_rpc.environment_key_is_cookie?}
 end
if has_cookie -%>

  @javax.annotation.Nullable
  private static String findCookie( final javax.servlet.http.HttpServletRequest request, @javax.annotation.Nonnull final String cookieName )
  {
    final javax.servlet.http.Cookie[] cookies = request.getCookies();
    if ( null != cookies )
    {
      for ( final javax.servlet.http.Cookie cookie : cookies )
      {
        if ( cookie.getName().equals( cookieName ) )
        {
          return cookie.getValue();
        }
      }
    }
    return null;
  }
<% end -%>

  @java.lang.Override
  protected java.lang.String readContent( final javax.servlet.http.HttpServletRequest request )
    throws javax.servlet.ServletException, java.io.IOException
  {
    _requestState.set( PRE_READ_STATE );
    return super.readContent( request );
  }

  @java.lang.Override
  protected void onBeforeRequestDeserialized( final String serializedRequest )
  {
    _requestState.set( BEFORE_REQUEST_DESERIALIZED );
    super.onBeforeRequestDeserialized( serializedRequest );
  }

  @java.lang.Override
  protected void onAfterRequestDeserialized( final com.google.gwt.user.server.rpc.RPCRequest rpcRequest )
  {
    _requestState.set( AFTER_REQUEST_DESERIALIZED );
    super.onAfterRequestDeserialized( rpcRequest );
  }

  @java.lang.Override
  protected void onAfterResponseSerialized( final String serializedResponse )
  {
    _requestState.set( AFTER_RESPONSE_SERIALIZED );
    super.onAfterResponseSerialized( serializedResponse );
  }

  @java.lang.Override
  protected void doUnexpectedFailure( @javax.annotation.Nonnull final java.lang.Throwable e )
  {
    if( AFTER_REQUEST_DESERIALIZED == _requestState.get() )
    {
      getServletContext().log( "Unexpected exception while dispatching incoming RPC call", e );
    }

    final javax.servlet.http.HttpServletResponse response = getThreadLocalResponse();
    try
    {
      response.setContentType( "text/plain" );
      response.setStatus( javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR );
      final String error = "The call failed on the server";
      try
      {
        response.getOutputStream().write( error.getBytes( java.nio.charset.StandardCharsets.UTF_8 ) );
      }
      catch ( final IllegalStateException ise )
      {
        // Handle the case where getWriter() was previously used
        response.getWriter().write( error );
      }
    }
    catch ( final java.io.IOException ignored )
    {
      // Ignore as we assume the client has gone away
    }
  }
}

/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.gwt_rpc.qualified_service_name) %>;

@SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "unchecked", "Convert2Diamond", "PMD.UnusedPrivateField", "PMD.AddEmptyString", "rawtypes", "PMD.LocalVariableNamingConventions", "PMD.FormalParameterNamingConventions", "RedundantSuppression", "CodeBlock2Expr", "DuplicatedCode" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "PSC_PRESIZE_COLLECTIONS", "CC_CYCLOMATIC_COMPLEXITY", "WOC_WRITE_ONLY_COLLECTION_LOCAL" } )
@sting.Injectable
public final class <%= service.gwt_rpc.service_name %>
{
<% service.methods.select{|method| method.gwt_rpc?}.each do |method|
   method_name = Reality::Naming.camelize(method.name)
   parameters = method.parameters.select{|parameter| !parameter.gwt_rpc.environmental?}
   has_reference_parameters = parameters.any?{|p| p.reference? }
   low_level_method_name = ((method.return_value.reference? && !parameters.any?{|p| p.reference?}) || parameters.any?{|p| p.collection? }) && method.imit? && (method.return_value.reference? || has_reference_parameters) ? "_#{method_name}" : method_name
 -%>
<% if method.imit? && (has_reference_parameters || method.return_value.reference?) -%>
<% if has_reference_parameters -%>

  public void <%= method_name %>(<%= parameters.collect{|p| "#{annotated_type(p, :imit, :default, :final => true)} #{p.name}" }.join(', ') %>)
  {
    <%= method_name %>(<%= (parameters.collect{|p| p.name } + ['null']).join(', ') %>);
  }
<% end -%>

  public void <%= method_name %>(<%= (parameters.collect{|p| "#{annotated_type(p, :imit, :default, :final => true)} #{p.name}" } + ["final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_callback_name}<#{method.return_value.imit.non_primitive_java_type}> callback"]).join(', ') %>)
  {
    <%= method_name %>(<%= (parameters.collect{|p| p.name } + ['callback','null']).join(', ') %>);
  }

  public void <%= method_name %>(<%= (method.parameters.select{|parameter| !parameter.imit.environmental?}.collect{|p| "#{annotated_type(p, :imit, :default, :final => true)} #{p.name}" } + ["final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_callback_name}<#{method.return_value.imit.non_primitive_java_type}> callback","final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_error_callback_name} errorCallback"]).join(', ') %>)
  {
<% method.parameters.select{|parameter| parameter.reference? && parameter.collection?}.each do |parameter| -%>
    <%= annotated_type(parameter, :gwt_rpc, :boundary, :final => true) %> $<%= parameter.name %> = <%= parameter.nullable? ? "null == #{parameter.name} ? null : " : '' %>new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><>();
    <% if parameter.nullable? %>if( null != <%= parameter.name %> ) {<% end %>
    for( final <%= parameter.imit.java_component_type %> entity: <%= parameter.name %> )
    {
    <%
       param_value =
       if parameter.reference?
         "entity.get#{parameter.referenced_entity.primary_key.imit.name}()"
       end
    %>
    $<%= parameter.name %>.add( <%= param_value %> );
    }
    <% if parameter.nullable? %>}<% end %>
<% end -%>
    <%= low_level_method_name %>(<%= method.parameters.select{|parameter| !parameter.imit.environmental?}.collect do |parameter|
  param_value = parameter.name
  if parameter.collection? && parameter.reference?
    param_value = "$#{parameter.name}"
  elsif parameter.reference?
    param_value = "#{parameter.name}.get#{parameter.referenced_entity.primary_key.imit.name}()"
  end
  if parameter.nullable? && !parameter.collection? && parameter.name != param_value
    param_value = "null == #{parameter.name} ? null : #{param_value}"
  end
  param_value
end.join(', ') %><%= method.parameters.select{|parameter| !parameter.imit.environmental?}.empty? ? '' : ', ' %> result ->
    {
<%
   if !method.return_value.collection?
     result_string = 'result'
     if method.return_value.reference?
       result_string = "#{method.return_value.nullable? ? 'null == result ? null : ' : ''}getById( #{method.return_value.referenced_entity.arez.qualified_name}.class, result )"
     end
   elsif method.return_value.reference?
     result_string = '$result'
   else
     result_string = 'result'
   end
-%>
<% if method.return_value.collection? && method.return_value.reference? -%>
        <%= annotated_type(method.return_value, :imit, :default, :final => true) %> $result = <% if method.return_value.nullable? %>null == result ? null : <% end %>new java.util.<%=  method.return_value.collection_type == :set ? 'HashSet' : 'ArrayList' %><>();
        if( null != result )
        {
          for( final <%= method.return_value.gwt_rpc.java_component_type(:boundary) %> id: result )
          {
          <%
             param_value =
             if method.return_value.reference?
               "getById( #{method.return_value.referenced_entity.arez.qualified_name}.class, id )"
             end
          -%>
            $result.add( <%= param_value %> );
          }
        }
<% end -%>
        if( null != callback )
        {
          callback.onSuccess( <%= result_string %> );
        }
    }, errorCallback );
  }
<% end -%>

  public void <%= low_level_method_name %>(<%= parameters.collect{|p| "#{annotated_type(p, :gwt_rpc, :boundary, :final => true)} #{Reality::Naming.camelize(p.name)}" }.join(', ') %>)
  {
    <%= low_level_method_name %>(<%= (parameters.collect{|p| Reality::Naming.camelize(p.name) } + ['null']).join(', ') %>);
  }

  public void <%= low_level_method_name %>(<%= (parameters.collect{|p| "#{annotated_type(p, :gwt_rpc, :boundary, :final => true)} #{Reality::Naming.camelize(p.name)}" } + ["final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_callback_name}<#{method.return_value.gwt_rpc.non_primitive_java_type(:boundary)}> callback"]).join(', ') %>)
  {
    <%= low_level_method_name %>(<%= (parameters.collect{|p| Reality::Naming.camelize(p.name) } + ['callback','null']).join(', ') %>);
  }

  public void <%= low_level_method_name %>(<%= (method.parameters.select{|parameter| !parameter.gwt_rpc.environmental?}.collect{|p| "#{annotated_type(p, :gwt_rpc, :boundary, :final => true)} #{Reality::Naming.camelize(p.name)}" } + ["final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_callback_name}<#{method.return_value.gwt_rpc.non_primitive_java_type(:boundary)}> callback","final @javax.annotation.Nullable #{service.data_module.repository.gwt.qualified_async_error_callback_name} errorCallback"]).join(', ') %>)
  {
<% method.parameters.select{|parameter| (parameter.enumeration? || parameter.struct?) && parameter.collection?}.each do |parameter| -%>
    <%= annotated_type(parameter, :gwt_rpc, :transport, :final => true) %> $<%= Reality::Naming.camelize(parameter.name) %> = <%= parameter.nullable? ? "null == #{Reality::Naming.camelize(parameter.name)} ? null : " : '' %>new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><>();
    <% if parameter.nullable? %>if( null != <%= Reality::Naming.camelize(parameter.name) %> ) {<% end %>
    for( final <%= parameter.gwt_rpc.java_component_type %> entity: <%= Reality::Naming.camelize(parameter.name) %> )
    {
    <%
       param_value =
       if parameter.enumeration?
         "entity.#{parameter.enumeration.numeric_values? ? 'ordinal()' : 'name()'}"
       else
         "akasha.core.JSON.stringify( entity )"
       end
    %>
    $<%= Reality::Naming.camelize(parameter.name) %>.add( <%= param_value %> );
    }
    <% if parameter.nullable? %>}<% end %>
<% end -%>
<% if method.imit? -%>
    final <%= method.name %>RequestParams $params = new <%= method.name %>RequestParams();
    <%= parameters.collect{|p| p.nullable? ? "if ( null != #{Reality::Naming.camelize(p.name)})
    {
      $params.#{p.name} = #{p.gwt_rpc.to_characteristic_transport_type};
    }" : "$params.#{p.name} = #{p.gwt_rpc.to_characteristic_transport_type};" }.join('
    ') %>

    replicant.Replicant.context()
      .exec( <%= service.data_module.repository.imit.qualified_system_constants_name %>.SCHEMA_ID,
             "<%= method.action.code %>",
             $params,
             $response -> {
<%- if method.return_value.return_type == :void -%>
        if ( jsinterop.base.Js.isTripleEqual( $response, jsinterop.base.Js.undefined() ) )
        {
          if ( null == callback )
          {
            return;
          }
          callback.onSuccess( null );
          return;
        }
<%- end -%>
<%- unless method.return_value.return_type == :void && method.base_exceptions.empty?-%>
        final jsinterop.base.JsPropertyMap<Object> $responsePropertyMap = $response.asPropertyMap();
<%- end -%>
<%- unless method.return_value.return_type == :void -%>
        if ( $responsePropertyMap.has( "data") )
        {
          final jsinterop.base.Any $responseData = $responsePropertyMap.getAsAny( "data" );

<%- if method.return_value.nullable? -%>
          if ( null == $responseData )
          {
            if ( null == callback )
            {
              return;
            }
            callback.onSuccess( null );
            return;
          }
<%- end -%>
<%- if method.return_value.return_type != :void -%>
<%- if method.return_value.collection? -%>
        final <%=method.return_value.gwt_rpc.non_primitive_java_type(:boundary) %> $result = new java.util.ArrayList<>();
        for ( final jsinterop.base.Any $row : $responseData.asArray() )
        {
          final <%=method.return_value.gwt_rpc.java_component_type(:boundary) %> $transformedRow = <%- if method.return_value.date? -%>
  iris.rose.client.data_type.util.RDate.toDate( iris.rose.client.data_type.util.RDate.parse( $row.asString() ) );
<%- elsif method.return_value.datetime? -%>
  new Date( $row.asLong() );
<%- elsif method.return_value.struct? -%>
  $row.cast();
<%- elsif method.return_value.integer? || method.return_value.reference? -%>
  $row.asInt();
<%- else -%>
  $row.asInt();
<%- end -%>
          $result.add( $transformedRow );
        }
<%- else -%>
          final <%=method.return_value.gwt_rpc.non_primitive_java_type(:boundary) %> $result = <%- if method.return_value.date? -%>
 iris.rose.client.data_type.util.RDate.toDate( iris.rose.client.data_type.util.RDate.parse( $responseData.asString() ) );
<%- elsif method.return_value.datetime? -%>
 new Date( $responseData.asLong() );
<%- elsif method.return_value.struct? -%>
 $responseData.cast();
<%- elsif method.return_value.integer? || method.return_value.reference? -%>
 $responseData.asInt();
<%- else -%>
 $responseData.asInt();
<%- end -%>
<%- end -%>

          if ( null != callback )
          {
            callback.onSuccess( $result );
            return;
          }
          return;
<%- end -%>
        }
<%- end -%>
<% unless method.base_exceptions.empty? -%>

        if ( $responsePropertyMap.has( "error" ) && null != errorCallback )
        {
          final String exceptionType = $responsePropertyMap.nestedGetAsAny( "$type" ).asString();
          switch ( exceptionType )
          {
            <%= method.base_exceptions.collect{|e| "case \"#{e.data_module.name}.#{e.name}\":
              errorCallback.onFailure( new #{e.imit.qualified_name}( #{e.parameters.collect{|exception_param| "#{exception_param.imit.get_from_json_extension("$responsePropertyMap")}"}.join(', ')} ) );
              break;"}.join('
            ') %>
            default:
              break;
          }
        }
<% end -%>
    } );
<% end -%>
  }

  @jsinterop.annotations.JsType( isNative = true, namespace = jsinterop.annotations.JsPackage.GLOBAL, name = "Object" )
  private static class <%= method.name %>RequestParams
  {
    <%= parameters.collect{|p| "#{p.gwt_rpc.characteristic_transport_type} #{p.name}" }.join(';
    ') %>;
  }
<% end -%>
<% if service.methods.any?{|m| m.imit? && m.return_value.reference? } -%>

  @java.lang.SuppressWarnings( "SameParameterValue" )
  @javax.annotation.Nonnull
  private <T> T getById( @javax.annotation.Nonnull final java.lang.Class<T> type, @javax.annotation.Nonnull final java.lang.Object id )
  {
    final T result = arez.Arez.context().safeAction( () -> arez.Arez.context().locator().findById( type, id ), arez.ActionFlags.NO_VERIFY_ACTION_REQUIRED );
    if( arez.Arez.shouldCheckApiInvariants() )
    {
      org.realityforge.braincheck.Guards.apiInvariant( () -> null != result, () -> "Unable to locate entity of type " + type + " and id " + id );
    }
    assert null != result;
    return result;
  }
<% end -%>
}

/* DO NOT EDIT: File is auto-generated */
package <%= to_package(client.qualified_abstract_keycloak_filter_name) %>;

/**
 * Base class to extend to define filter.
 *
 * <code>
 * @javax.enterprise.context.ApplicationScoped
 * @javax.enterprise.inject.Typed( <%= client.qualified_keycloak_filter_interface_name %>.class )
 * class <%= client.abstract_keycloak_filter_name.gsub(/^Abstract/,'') %> extends <%= client.abstract_keycloak_filter_name %>
 * {
 *   ...
 * }
 * </code>
 */
public abstract class <%= client.abstract_keycloak_filter_name %>
  implements <%= client.qualified_keycloak_filter_interface_name %>
{
<% if client.keycloak_repository.repository.imit? -%>
  private boolean _disableSessionServiceProtection;
<% end -%>
<% if client.keycloak_repository.repository.syncrecord? -%>
  private boolean _disableSyncServiceProtection;
<% end -%>
<% if client.keycloak_repository.repository.imit? || client.keycloak_repository.repository.syncrecord? -%>

<% if client.keycloak_repository.repository.imit? -%>
  @java.lang.SuppressWarnings( "BanJNDI" )
<% end -%>
  @javax.annotation.PostConstruct
  protected void postConstruct()
  {
<% if client.keycloak_repository.repository.imit? -%>
    try
    {
      _disableSessionServiceProtection = new javax.naming.InitialContext().lookup( "<%= Reality::Naming.underscore(client.keycloak_repository.repository.name) -%>/env/disable_session_service_protection" ).equals( Boolean.TRUE );
    }
    catch ( final java.lang.Exception ignored )
    {
      //Ignored.
    }
<% end -%>
<% if client.keycloak_repository.repository.syncrecord? -%>
    try
    {
      _disableSyncServiceProtection = new javax.naming.InitialContext().lookup( "<%= Reality::Naming.underscore(client.keycloak_repository.repository.name) -%>/env/disable_sync_service_protection" ).equals( Boolean.TRUE );
    }
    catch ( final java.lang.Exception ignored )
    {
      //Ignored.
    }
<% end -%>
  }
<% end -%>

  @Override
  public boolean shouldProtectRequest( @javax.annotation.Nonnull final javax.servlet.ServletRequest request )
  {
    return isPathProtected( getApplicationPath( request ) );
  }

  @javax.annotation.Nonnull
  protected String getApplicationPath( @javax.annotation.Nonnull final javax.servlet.ServletRequest request )
  {
    final javax.servlet.http.HttpServletRequest httpRequest = (javax.servlet.http.HttpServletRequest) request;
    return httpRequest.getRequestURI().substring( httpRequest.getContextPath().length() );
  }

  @Override
  public boolean postAuthenticateGuard( @javax.annotation.Nonnull final javax.servlet.ServletRequest request, @javax.annotation.Nonnull final javax.servlet.ServletResponse response )
  {
    return true;
  }

  protected boolean isPathProtected( @javax.annotation.Nonnull final String path )
  {
<% base_path = client.keycloak_repository.repository.jaxrs? ? "#{client.keycloak_repository.repository.jaxrs.qualified_constants_name}.APPLICATION_PATH" : '"api"' -%>
<% if client.keycloak_repository.repository.appconfig? -%>
    if ( path.startsWith( <%= base_path %> + '/' + iris.appconfig.server.rest.SystemSettingRestService.PATH_PREFIX ) )
    {
      return false;
    }
<% end -%>
<% if client.keycloak_repository.repository.syncrecord? -%>
    if ( path.startsWith( <%= base_path %> + '/' + iris.syncrecord.server.rest.SyncStatusService.PATH_PREFIX ) )
    {
      return false;
    }
    if ( _disableSyncServiceProtection && path.startsWith( <%= base_path %> + "/sync" ) )
    {
      return false;
    }
<% end -%>
<% if client.keycloak_repository.repository.imit? -%>
    if ( _disableSessionServiceProtection && path.startsWith( <%= base_path %>  + replicant.shared.SharedConstants.CONNECTION_URL_FRAGMENT ) )
    {
      return false;
    }
<% end -%>
<%
  client.keycloak_repository.repository.data_modules.each do |data_module|
    data_module.services.select{|s| s.ejb? && s.jws?}.each do |service|
-%>
    if ( path.startsWith( "<%= service.jws.url %>" ) )
    {
      return false;
    }
<%
    end
  end
-%>
    return true;
  }
}

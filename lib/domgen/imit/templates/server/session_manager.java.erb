/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_session_manager_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( "unchecked" )
@javax.ejb.Singleton( name = <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.NAME )
@javax.ejb.ConcurrencyManagement( javax.ejb.ConcurrencyManagementType.BEAN )
@javax.ejb.Local( { org.realityforge.replicant.server.ee.rest.ReplicantPollSource.class, org.realityforge.replicant.server.EntityMessageEndpoint.class, org.realityforge.ssf.SessionManager.class, <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.class } )
public class <%= repository.imit.session_manager_name %>
  extends org.realityforge.replicant.server.transport.Replicant<% if repository.imit.poll_replicate_mode? -%>Json<% end -%>SessionManager<<%= repository.imit.qualified_session_name %>>
  implements <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %><% if repository.imit.poll_replicate_mode? %>, org.realityforge.replicant.server.ee.rest.ReplicantPollSource<% end %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= repository.imit.session_manager_name %>.class.getName() );
<% if repository.imit.graphs.any?{|g| !g.filter_parameter.nil? } -%>
  private transient final org.codehaus.jackson.map.ObjectMapper _jsonMapper = new org.codehaus.jackson.map.ObjectMapper();
  private transient final javax.json.JsonReaderFactory _readerFactory = javax.json.Json.createReaderFactory( null );
<% end -%>
  @javax.inject.Inject
  private <%= repository.imit.qualified_graph_encoder_name %> _encoder;
<%
entities = repository.imit.graphs.select{|g| g.instance_root?}.collect{|g|repository.entity_by_name(g.instance_root)}
repository.imit.graphs.select{|g| !g.instance_root?}.each do |graph|
  graph.type_roots.each do |type_root_name|
    entities << repository.entity_by_name(type_root_name)
  end
end

entities.uniq.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Domgen::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository;
<% end -%>
  @javax.inject.Inject
  private <%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %> _context;

  /**
   * Remove idle session changes. This is called by a scheduler.
   */
  @java.lang.Override
  public void removeIdleSessions()
  {
    final int maxIdleTime = 1000 * 60 * 5;
    final int removedSessions = removeIdleSessions( maxIdleTime );
    if ( 0 != removedSessions && LOG.isLoggable( java.util.logging.Level.INFO ) )
    {
      LOG.info( "Removed " + removedSessions + " idle sessions" );
    }
  }

  @java.lang.SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
  @java.lang.Override
  public boolean saveEntityMessages( @javax.annotation.Nullable final String sessionID,
                                     @javax.annotation.Nullable final String requestID,
                                     @javax.annotation.Nonnull final java.util.Collection<org.realityforge.replicant.server.EntityMessage> messages,
                                     @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet sessionChanges )
  {
    //TODO: Rewrite this so that we add clients to indexes rather than searching through everyone for each change!
    getLock().readLock().lock();
    final java.util.Map<String, <%= repository.imit.qualified_session_name %>> sessionMap = getSessions();
    final org.realityforge.replicant.server.ChangeAccumulator accumulator = new org.realityforge.replicant.server.ChangeAccumulator();
    try
    {
      final java.util.Collection<<%= repository.imit.qualified_session_name %>> sessions = sessionMap.values();
      for ( final org.realityforge.replicant.server.EntityMessage message : messages )
      {
        final java.util.Map<String, java.io.Serializable> routingKeys = message.getRoutingKeys();
<%
  repository.imit.graphs.select{|graph| graph.instance_root?}.each do |graph|

    instance_root = repository.entity_by_name(graph.instance_root)
    type = instance_root.primary_key.jpa.non_primitive_java_type
    param = " #{graph.name} "
%>

        final <%= type %> <%= graph.name %> = (<%= type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>_KEY );
        if ( null != <%= graph.name %> )
        {
<%
  extra_interest_filter = ''
  if graph.filtered?
    graph.routing_keys.each do |routing_key|
      var_name = Domgen::Naming.camelize(routing_key.target_attribute.qualified_name.gsub('.',''))
      extra_interest_filter << ", #{var_name}"
      param_type = routing_key.target_attribute.jpa.non_primitive_java_type
      param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
          final <%= param_type %> <%= var_name %> = (<%= param_type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>_<%= Domgen::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<%
    end
  end

  customize_filter = ", session#{graph.instance_root? ? ", #{graph.name}" : ''}"
  if graph.filter_parameter?
    customize_filter = "#{customize_filter}, session.#{graph.instance_root? ? "getInterestedIn#{graph.name}().get( #{graph.name} )" : "get#{graph.name}Parameter()" }"
  end
  customize_filter = "#{customize_filter}#{extra_interest_filter}"
-%>
          for ( final <%= repository.imit.qualified_session_name %> session : sessions )
          {
            if ( session.<%= graph.instance_root? ? "is#{graph.name}Interesting" : "isInterestedIn#{graph.name}" %>(<%= param %> ) )
            {
              final org.realityforge.replicant.server.EntityMessage m = _context.filterMessageOfInterestIn<%= graph.name %>Graph( message<%= customize_filter %> );
              if( null != m )
              {
                if( m.isDelete() && <%= repository.imit.qualified_message_constants_name %>.<%= Domgen::Naming.uppercase_constantize(instance_root.data_module.name.to_s) %>_<%= Domgen::Naming.uppercase_constantize(instance_root.name.to_s) %> == m.getTypeID() )
                {
                  doUnsubscribeFrom<%= graph.name %>( accumulator, session<%= param.size > 0 ? ", #{param}" : "" %> );
                }
              }
            }
          }
        }
<% end -%>
      }

      for ( final org.realityforge.replicant.server.EntityMessage message : messages )
      {
        final java.util.Map<String, java.io.Serializable> routingKeys = message.getRoutingKeys();
<%
  repository.imit.graphs.each do |graph|

  param = ''
  type = 'Boolean'
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    instance_root = repository.entity_by_name(graph.instance_root)
    type = instance_root.primary_key.jpa.non_primitive_java_type
    param = " #{graph.name} "
  end
-%>
        final <%= type %> <%= graph.name %> = (<%= type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>_KEY );
        if ( null != <%= graph.name %> )
        {
<%
  extra_interest_filter = ''
  if graph.filtered?
    graph.routing_keys.each do |routing_key|
      var_name = Domgen::Naming.camelize(routing_key.target_attribute.qualified_name.gsub('.',''))
      extra_interest_filter << ", #{var_name}"
      param_type = routing_key.target_attribute.jpa.non_primitive_java_type
      param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
          final <%= param_type %> <%= var_name %> = (<%= param_type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>_<%= Domgen::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<%
    end
  end

  customize_filter = ", session#{graph.instance_root? ? ", #{graph.name}" : ''}"
  if graph.filter_parameter?
    customize_filter = "#{customize_filter}, session.#{graph.instance_root? ? "getInterestedIn#{graph.name}().get( #{graph.name} )" : "get#{graph.name}Parameter()" }"
  end
  customize_filter = "#{customize_filter}#{extra_interest_filter}"
-%>
<% if graph.cacheable? && !graph.external_cache_management? -%>
          _auto<%= graph.name %>RuntimeIndex++;
<% end -%>
          for ( final <%= repository.imit.qualified_session_name %> session : sessions )
          {
            if ( session.<%= graph.instance_root? ? "is#{graph.name}Interesting" : "isInterestedIn#{graph.name}" %>(<%= param %> ) )
            {
              final org.realityforge.replicant.server.EntityMessage m = _context.filterMessageOfInterestIn<%= graph.name %>Graph( message<%= customize_filter %> );
              if( null != m )
              {
                accumulator.addChange( session, new org.realityforge.replicant.server.Change( m, <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? graph.name : 0 %> ) );
              }
            }
          }
        }
<% end -%>
      }
      {
        final <%= repository.imit.qualified_session_name %> session = null != sessionID ? getSession( sessionID ) : null;
        if( null != session && null != sessionChanges )
        {
          accumulator.addChanges( session, sessionChanges.getChanges() );
          accumulator.addActions( session, sessionChanges.getChannelActions() );
        }
      }
      {
        for ( final <%= repository.imit.qualified_session_name %> session : getSessions().values() )
        {
          expandLinks( session, accumulator.getChangeSet( session ) );
        }
      }
    }
    finally
    {
      getLock().readLock().unlock();
    }

    return accumulator.complete( sessionID, requestID );
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected <%= repository.imit.qualified_session_name %> newSessionInfo()
  {
    return new <%= repository.imit.qualified_session_name %>( java.util.UUID.randomUUID().toString() );
  }

  protected void expandLinks( @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session, final org.realityforge.replicant.server.ChangeSet changeSet )
  {
    while( expandLink( session, changeSet) );
  }

  protected boolean expandLink( @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session, final org.realityforge.replicant.server.ChangeSet changeSet )
  {
    for ( final org.realityforge.replicant.server.Change change : changeSet.getChanges() )
    {
      final java.util.Set<org.realityforge.replicant.server.ChannelLink> links = change.getEntityMessage().getLinks();
      if ( null != links )
      {
        for ( final org.realityforge.replicant.server.ChannelLink link : links )
        {
          <% repository.imit.graphs.select{|g| g.instance_root? }.collect{|g| g.inward_graph_links }.flatten.each do |graph_link|
           graph = repository.imit.graph_by_name(graph_link.target_graph)
           source_graph = repository.imit.graph_by_name(graph_link.source_graph)
           entity = repository.entity_by_name(graph.instance_root)
           source_root = repository.entity_by_name(source_graph.instance_root)
         -%>
if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal() == link.getTargetChannel().getChannelID() )
          {
            if( !session.is<%= graph.name %>Interesting( (<%= entity.primary_key.jpa.java_type %>) link.getTargetChannel().getSubChannelID() ) )
            {
              final <%= entity.primary_key.jpa.java_type %> id = (<%= entity.primary_key.jpa.java_type %>) link.getTargetChannel().getSubChannelID();
              final <%= entity.jpa.qualified_name %> entity = _<%= Domgen::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getByID( id );
<% if graph.filter_parameter -%>
              final <%= Domgen::Java.java_type(source_graph.filter_parameter, :ee, :default) %> filter = session.get<%= source_graph.name %>Parameter( (<%= source_root.primary_key.jpa.java_type %>) link.getSourceChannel().getSubChannelID() );
              assert null != filter;
              if ( _context.shouldFollowLinkFrom<%= graph_link.source_graph %>To<%= graph.name %>( entity, filter ) )
<% end -%>
              {
                session.registerInterestIn<%= graph.name %>( id<% if graph.filter_parameter -%>, filter<% end -%> );
                final org.realityforge.replicant.server.EntityMessageSet entityMessageSet = encode<%= graph.name %>( entity<% if graph.filter_parameter -%>, filter<% end -%> );
                changeSet.mergeAll( org.realityforge.replicant.server.ChangeUtil.toChanges( entityMessageSet.getEntityMessages(), <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), id ) );
                changeSet.addAction( new org.realityforge.replicant.server.ChannelAction( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), id ), org.realityforge.replicant.server.ChannelAction.Action.ADD, <%= graph.filtered? ? 'toJsonObject( filter )' : 'null' %> ) );
                return true;
              }
            }
          }
          else <% end -%>

          {
            throw new IllegalStateException("Attempted to propagate non instance graph " + link.getTargetChannel().getChannelID() );
          }
        }
      }
    }
    return false;
  }
<%
  repository.imit.graphs.each do |graph|

  param = []
  param_value = []
  pk_accessor = ''
  instance_root = nil
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    instance_root = repository.entity_by_name(graph.instance_root)
    param << "@javax.annotation.Nonnull final #{instance_root.jpa.qualified_name} entity"
    param_value << 'entity'
    pk_accessor = "entity.#{getter_for(instance_root.primary_key)}"
  end
  update_param = param.dup
  update_param_value = param_value.dup
  filter_param = nil
  if graph.filter_parameter
    p = graph.filter_parameter
    filter_param = "#{nullability_annotation(p.nullable?)} #{Domgen::Java.java_type(p, :ee, :default)} filter"
    update_param << filter_param
    update_param_value << 'filter'
  end
  param = param.join(', ')
  param_value = param_value.join(', ')
  update_param = update_param.join(', ')
  update_param_value = update_param_value.join(', ')

  param = ", #{param}" if param.size > 0
  param_value = ", #{param_value}" if param_value.size > 0
  update_param = ", #{update_param}" if update_param.size > 0
  update_param_value = ", #{update_param_value}" if update_param_value.size > 0
%>
<% if graph.cacheable? -%>
  private org.realityforge.replicant.server.EntityMessageSet _cached<%= graph.name %>Messages;
  private final java.util.concurrent.locks.ReadWriteLock _lock<%= graph.name %>Cache = new java.util.concurrent.locks.ReentrantReadWriteLock();
  private String _cached<%= graph.name %>Key;
<% unless graph.external_cache_management? -%>
  private java.util.UUID _auto<%= graph.name %>RuntimeKey = java.util.UUID.randomUUID();
  private long _auto<%= graph.name %>RuntimeIndex;
<% end -%>
<% end -%>

  public <%= graph.cacheable? ? "boolean" : "void" %> subscribeTo<%= graph.name %>( @javax.annotation.Nonnull final String sessionID<%= update_param %><% if graph.cacheable? -%>, @javax.annotation.Nullable final String cacheKey<% end %> )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    final <%= repository.imit.qualified_session_name %> session = ensureSession( sessionID );
    if ( !session.<%= graph.instance_root? ? "is#{graph.name}Interesting( #{pk_accessor} )" : "isInterestedIn#{graph.name}()" %> )
    {
<% if graph.instance_root? -%>
      session.registerInterestIn<%= graph.name %>( <%= pk_accessor %><%= graph.filter_parameter.nil? ? '' : ", filter" %> );
      final org.realityforge.replicant.server.ChangeSet changeSet = org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges();
      populateChangeSetFor<%= graph.name %>( session, <%= pk_accessor %>, changeSet, encode<%= graph.name %>( entity<%= graph.filter_parameter.nil? ? '' : ', filter' %> )<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
      expandLinks( session, changeSet );
<% else -%>
      session.registerInterestedIn<%= graph.name %>(<%= graph.filter_parameter.nil? ? '' : ' filter ' %>);
<% if graph.cacheable? -%>
<% if graph.external_cache_management? -%>
      final String cached<%= graph.name %>Key = _context.get<%= graph.name %>CacheKey();
<% else -%>
      final String cached<%= graph.name %>Key = _auto<%= graph.name %>RuntimeKey + "-" + _auto<%= graph.name %>RuntimeIndex;
<% end -%>
      _lock<%= graph.name %>Cache.readLock().lock();
      final boolean uncached;
      try
      {
        uncached = null == _cachedMetaDataMessages || ( null == cached<%= graph.name %>Key || !cached<%= graph.name %>Key.equals(_cached<%= graph.name %>Key) );
      }
      finally
      {
        _lock<%= graph.name %>Cache.readLock().unlock();
      }
      if ( uncached )
      {
        _lock<%= graph.name %>Cache.writeLock().lock();
        try
        {
          _cached<%= graph.name %>Key = cached<%= graph.name %>Key;
          _cached<%= graph.name %>Messages = new org.realityforge.replicant.server.EntityMessageSet();
          <% if graph.external_data_load? -%>_context.<% end -%>collect<%= graph.name %>( _cached<%= graph.name %>Messages );
        }
        finally
        {
          _lock<%= graph.name %>Cache.writeLock().unlock();
        }
      }
<% else -%>
      final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
      <% if graph.external_data_load? || graph.filtered? -%>_context.<% end -%>collect<%= graph.name %>( messages<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
      final org.realityforge.replicant.server.ChangeSet changeSet = org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges();
      populateChangeSetFor<%= graph.name %>( session, null, changeSet, messages<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
<% end -%>
<% end -%>
<% if graph.cacheable? -%>
      if( null == cacheKey || !cacheKey.equals( _cached<%= graph.name %>Key ) )
      {
        final org.realityforge.replicant.server.ChangeSet changeSet = new org.realityforge.replicant.server.ChangeSet();
        populateChangeSetFor<%= graph.name %>( session, <%= graph.instance_root? ? pk_accessor : 'null' %>, changeSet, _cached<%= graph.name %>Messages );
        sendPacket( session, _cachedMetaDataKey, changeSet );
        return true;
      }
<% end -%>
    }
<% if graph.filter_parameter && !graph.filter_parameter.immutable? -%>
    else
    {
      update<%= graph.name %>Subscription( sessionID<%= update_param_value %> );
    }
<% end -%>
<% if graph.cacheable? -%>
    return false;
<% end -%>
  }
<% if graph.instance_root?

  root_type = Domgen::Java.java_type(instance_root.primary_key, :ee, :default)
-%>

  public void subscribeToMultiple<%= graph.name %>( @javax.annotation.Nonnull final String sessionID, @javax.annotation.Nonnull final java.util.List<<%= root_type %>> roots<%= filter_param.nil? ? '' : ", #{filter_param}" %> )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    final <%= repository.imit.qualified_session_name %> session = ensureSession( sessionID );
    if ( roots.isEmpty() )
    {
      return;
    }
    final java.util.ArrayList<<%= root_type %>> newInstanceRoots = new java.util.ArrayList<>();
<% if graph.filtered? -%>
    final java.util.Map<<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>, java.util.ArrayList<<%= root_type %>>> updatedInstanceRoots = new java.util.HashMap<>();
<% end -%>

    for ( final <%= root_type %> root : roots )
    {
      if ( !session.is<%= graph.name %>Interesting( root ) )
      {
        newInstanceRoots.add( root );
      }
<% if graph.filtered? -%>
      else
      {
        final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> parameter = session.get<%= graph.name %>Parameter( root );
        if ( !parameter.equals( filter ) )
        {
          java.util.ArrayList<<%= root_type %>> existing = updatedInstanceRoots.get( parameter );
          if ( null == existing )
          {
            existing = new java.util.ArrayList<>();
            updatedInstanceRoots.put( parameter, existing );
          }
          existing.add( root );
        }
      }
<% end -%>
    }

<% if graph.filtered? -%>
    for ( final java.util.Map.Entry<<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>, java.util.ArrayList<<%= root_type %>>> entry : updatedInstanceRoots.entrySet() )
    {
      updateMultiple<%= graph.name %>Subscriptions( session, filter, entry.getKey(), entry.getValue() );
    }
<% end -%>

    if ( !newInstanceRoots.isEmpty() )
    {
      addMultiple<%= graph.name %>Subscriptions( session<% if graph.filtered? -%>, filter<% end -%>, newInstanceRoots );
    }
  }

  private void addMultiple<%= graph.name %>Subscriptions( @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session<% if graph.filtered? -%>, @javax.annotation.Nonnull <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end -%>, @javax.annotation.Nonnull final java.util.ArrayList<<%= root_type %>> roots )
  {
    final org.realityforge.replicant.server.ChangeSet changeSet = org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges();
    for ( final <%= root_type %> root : roots )
    {
      changeSet.addAction( new org.realityforge.replicant.server.ChannelAction( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), root ), org.realityforge.replicant.server.ChannelAction.Action.ADD, <%= graph.filtered? ? 'toJsonObject( filter )' : 'null' %> ) );
      session.registerInterestIn<%= graph.name %>( root<% if graph.filtered? -%>, filter<% end -%> );
    }

  }

<% if graph.filtered? -%>
  private void updateMultiple<%= graph.name %>Subscriptions( @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session, @javax.annotation.Nonnull <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter, @javax.annotation.Nonnull <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, @javax.annotation.Nonnull final java.util.ArrayList<<%= root_type %>> newInstanceRoots )
  {

  }

<% end -%>
<% end -%>
<% if !graph.instance_root? && !graph.external_data_load? -%>
  private void collect<%= graph.name %>( @javax.annotation.Nonnull org.realityforge.replicant.server.EntityMessageSet messages )
  {
    // Add to a list so that when routing we limit the number of new entities that are loaded during routing
    final java.util.LinkedList<Object> objects = new java.util.LinkedList<>();
<% graph.type_roots.each do |type_root_name|
  type = repository.entity_by_name(type_root_name)
-%>
    objects.addAll( _<%= Domgen::Naming.camelize("#{type.data_module.name}#{type.name}") %>Repository.findAll() );
<% end -%>
    _encoder.encodeObjects( messages, objects );
  }

<% end -%>
<% if graph.instance_root? -%>

  private org.realityforge.replicant.server.EntityMessageSet encode<%= graph.name %>( @javax.annotation.Nonnull final <%= repository.entity_by_name(graph.instance_root).jpa.qualified_name %> entity<%= graph.filter_parameter.nil? ? '' : ", #{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)} filter" %> )
  {
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    _encoder.encode<%= graph.name %>( messages, entity<%= graph.filter_parameter.nil? ? '' : ", filter" %> );
    return messages;
  }
<% end -%>

  private void populateChangeSetFor<%= graph.name %>( @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session, @javax.annotation.Nullable final java.io.Serializable subChannelID, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final org.realityforge.replicant.server.EntityMessageSet messages<%= graph.filter_parameter.nil? ? '' : ", #{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)} filter" %> )
  {
    changeSet.mergeAll( org.realityforge.replicant.server.ChangeUtil.toChanges( messages.getEntityMessages(), <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), null == subChannelID ? 0 : subChannelID ) );
    changeSet.addAction( new org.realityforge.replicant.server.ChannelAction( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), subChannelID ), org.realityforge.replicant.server.ChannelAction.Action.ADD, <%= graph.filter_parameter.nil? ? 'null' : 'toJsonObject( filter )' %> ) );
  }

<% if graph.filter_parameter && !graph.filter_parameter.immutable? -%>
  public void update<%= graph.name %>Subscription( @javax.annotation.Nonnull final String sessionID<%= update_param %> )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    final <%= repository.imit.qualified_session_name %> session = ensureSession( sessionID );
    <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> original = session.get<%= graph.name %>Parameter(<%= pk_accessor %>);
    session.updateInterestIn<%= graph.name %>( <%= "#{pk_accessor}#{'' == pk_accessor ? '' : ", "}" %>filter );
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    _context.collectForFilterChange<%= graph.name %>( messages<% if graph.instance_root? -%>, entity<% end %>, original, filter );
    final org.realityforge.replicant.server.ChangeSet changeSet = org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges();
    changeSet.addAction( new org.realityforge.replicant.server.ChannelAction( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? pk_accessor : 0 %> ), org.realityforge.replicant.server.ChannelAction.Action.UPDATE, toJsonObject( filter ) ) );
    org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges().mergeAll( org.realityforge.replicant.server.ChangeUtil.toChanges( messages.getEntityMessages(), <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? pk_accessor : 0 %> ) );
<%
  processed = []
  graph.outward_graph_links.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
      next if processed.include?(key)
      processed << key
      instance_root = repository.entity_by_name(target_graph.instance_root)
-%>
    {
      final java.util.List<<%= instance_root.jpa.qualified_name %>> links = _context.getLinksToUpdateFor<%= graph_link.source_graph %>To<%= target_graph.name %>( entity, filter );
      for ( final <%= instance_root.jpa.qualified_name %> link : links )
      {
        subscribeTo<%= target_graph.name %>( sessionID, link, filter );
      }
    }
<% end if graph.instance_root? -%>
  }
<% end -%>

  public void unsubscribeFrom<%= graph.name %>( @javax.annotation.Nonnull final String sessionID<%= param %> )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    final <%= repository.imit.qualified_session_name %> session = ensureSession( sessionID );
    doUnsubscribeFrom<%= graph.name %>( session<%= pk_accessor.size == 0 ? '' : ", #{pk_accessor}" %> );
  }

<% if graph.instance_root? -%>
  private void doUnsubscribeFrom<%= graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeAccumulator accumulator, @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session<%= graph.instance_root? ? ", #{repository.entity_by_name(graph.instance_root).primary_key.imit.java_type} id" : '' %> )
  {
    if ( session.is<%= graph.name %>Interesting( id ) )
    {
      session.deregisterInterestIn<%= graph.name %>( id );
      accumulator.addAction( session, new org.realityforge.replicant.server.ChannelAction( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? 'id' : 'null' %> ), org.realityforge.replicant.server.ChannelAction.Action.REMOVE, null ) );
    }
  }
<% end -%>

  private void doUnsubscribeFrom<%= graph.name %>( @javax.annotation.Nonnull final <%= repository.imit.qualified_session_name %> session<%= graph.instance_root? ? ", #{repository.entity_by_name(graph.instance_root).primary_key.imit.java_type} id" : '' %> )
  {
<% if graph.instance_root? -%>
    if ( session.is<%= graph.name %>Interesting( id ) )
    {
      session.deregisterInterestIn<%= graph.name %>( id );
<% else -%>
    if ( session.isInterestedIn<%= graph.name %>() )
    {
      session.deregisterInterestedIn<%= graph.name %>();
<% end -%>
      org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges().addAction( new org.realityforge.replicant.server.ChannelAction( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? 'id' : 'null' %> ), org.realityforge.replicant.server.ChannelAction.Action.REMOVE, null ) );
    }
  }
<% end %>
<% if repository.imit.graphs.any?{|g| !g.filter_parameter.nil? } -%>
  private javax.json.JsonObject toJsonObject( final Object filter )
  {
    try
    {
      try ( final javax.json.JsonReader reader = _readerFactory.createReader( new java.io.StringReader( _jsonMapper.writeValueAsString( filter ) ) ) )
      {
        return reader.readObject();
      }
    }
    catch ( java.io.IOException ioe )
    {
      throw new IllegalStateException( ioe.getMessage(), ioe );
    }
  }
<% end -%>

  protected final <%= repository.imit.qualified_session_name %> ensureSession( @javax.annotation.Nonnull final String sessionID )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    final <%= repository.imit.qualified_session_name %> session = getSession( sessionID );
    if ( null == session )
    {
      throw new <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>();
    }
    return session;
  }
<% if repository.imit.poll_replicate_mode? -%>

  @java.lang.Override
  @javax.annotation.Nullable
  public final String poll( @javax.annotation.Nonnull final String clientID, final int lastSequenceAcked )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    return pollJsonData( ensureSession( clientID ), lastSequenceAcked );
  }
<% end -%>
}

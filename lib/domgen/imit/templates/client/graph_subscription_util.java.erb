/* DO NOT EDIT: File is auto-generated */
package <%= to_package(graph.qualified_subscription_util_name) %>;

public final class <%= graph.subscription_util_name %>
{
  private <%= graph.subscription_util_name %>()
  {
  }

  @javax.annotation.Nonnull
  public static replicant.ChannelAddress getGraphAddress(<%= graph.instance_root? ? " final int id " : "" %>)
  {
    return new replicant.ChannelAddress( <%= graph.application.repository.imit.qualified_system_constants_name %>.SCHEMA_ID, <%= graph.application.repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %><%= graph.instance_root? ? ", id " : "" %> );
  }

<% if graph.instance_root? -%>
  public static boolean isGraphSubscribed( @javax.annotation.Nonnull final <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> root )
  {
    return isGraphSubscribed( root.<%= getter_for(graph.application.repository.entity_by_name(graph.instance_root).primary_key) %> );
  }

<% end -%>
  public static boolean isGraphSubscribed(<%= graph.instance_root? ? " final int id " : "" %>)
  {
    return isGraphSubscribed( replicant.Replicant.context()<%= graph.instance_root? ? ", id" : "" %> );
  }

  public static boolean isGraphSubscribed( @javax.annotation.Nonnull final replicant.ReplicantContext context<%= graph.instance_root? ? ", final int id " : "" %> )
  {
    return null != findSubscription( context<%= graph.instance_root? ? ", id" : "" %> );
  }

<% if graph.instance_root? -%>
  public static replicant.Subscription findSubscription( @javax.annotation.Nonnull final <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> root )
  {
    return findSubscription( root.<%= getter_for(graph.application.repository.entity_by_name(graph.instance_root).primary_key) %> );
  }

<% end -%>
  @javax.annotation.Nullable
  public static replicant.Subscription findSubscription(<%= graph.instance_root? ? " final int id " : "" %>)
  {
    return findSubscription( replicant.Replicant.context()<%= graph.instance_root? ? ", id" : "" %> );
  }

  @javax.annotation.Nullable
  public static replicant.Subscription findSubscription( @javax.annotation.Nonnull final replicant.ReplicantContext context<%= graph.instance_root? ? ", final int id " : "" %> )
  {
    return context.findSubscription( getGraphAddress(<%= graph.instance_root? ? " id " : "" %>) );
  }
<% if graph.external_visibility? -%>
<% if graph.instance_root? -%>

  @javax.annotation.Nullable
  public static replicant.AreaOfInterest findAreaOfInterest( @javax.annotation.Nonnull final <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> root )
  {
    return findAreaOfInterest( root.<%= getter_for(graph.application.repository.entity_by_name(graph.instance_root).primary_key) %> );
  }

  @javax.annotation.Nonnull
  public static replicant.AreaOfInterest.Status findAreaOfInterestStatus( @javax.annotation.Nonnull final <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> root )
  {
    final replicant.AreaOfInterest areaOfInterest = findAreaOfInterest( root );
    return null == areaOfInterest ? replicant.AreaOfInterest.Status.NOT_ASKED : areaOfInterest.getStatus();
  }

<% end -%>

  @javax.annotation.Nullable
  public static replicant.AreaOfInterest findAreaOfInterest(<%= graph.instance_root? ? " final int id " : "" %>)
  {
    return findAreaOfInterest( replicant.Replicant.context()<%= graph.instance_root? ? ", id" : "" %> );
  }

  @javax.annotation.Nonnull
  public static replicant.AreaOfInterest.Status findAreaOfInterestStatus(<%= graph.instance_root? ? " final int id " : "" %>)
  {
    final replicant.AreaOfInterest areaOfInterest = findAreaOfInterest(<%= graph.instance_root? ? " id " : "" %>);
    return null == areaOfInterest ? replicant.AreaOfInterest.Status.NOT_ASKED : areaOfInterest.getStatus();
  }

  @javax.annotation.Nullable
  public static replicant.AreaOfInterest findAreaOfInterest( @javax.annotation.Nonnull final replicant.ReplicantContext context<%= graph.instance_root? ? ", final int id " : "" %> )
  {
    return context.findAreaOfInterestByAddress( getGraphAddress(<%= graph.instance_root? ? " id " : "" %>) );
  }

  @javax.annotation.Nonnull
  public static replicant.AreaOfInterest.Status findAreaOfInterestStatus( @javax.annotation.Nonnull final replicant.ReplicantContext context<%= graph.instance_root? ? ", final int id " : "" %> )
  {
    final replicant.AreaOfInterest areaOfInterest = findAreaOfInterest( context<%= graph.instance_root? ? ", id" : "" %> );
    return null == areaOfInterest ? replicant.AreaOfInterest.Status.NOT_ASKED : areaOfInterest.getStatus();
  }
<% end -%>
<% if graph.instance_root? -%>

  @javax.annotation.Nullable
  public static <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> findRoot( final int id )
  {
    return findRoot( replicant.Replicant.context(), id );
  }

  @javax.annotation.Nullable
  public static <%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %> findRoot( @javax.annotation.Nonnull final replicant.ReplicantContext context, final int id )
  {
    final replicant.Subscription subscription = findSubscription( context, id );
    return null == subscription ? null : (<%= graph.application.repository.entity_by_name(graph.instance_root).arez.qualified_name %>) subscription.getInstanceRoot();
  }
<% end -%>
}
